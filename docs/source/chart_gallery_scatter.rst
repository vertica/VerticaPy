.. _chart_gallery.scatter:

=============
Scatter Plots
=============

.. Necessary Code Elements

.. ipython:: python
    :suppress:

    import verticapy as vp
    import numpy as np

    N = 100

    data = vp.vDataFrame({
      "category": [np.random.choice(['A','B','C']) for _ in range(N)],
      "x": np.random.normal(5, 1, N),
      "y": np.random.normal(8, 1.5, N),
      "z": np.random.normal(10, 2, N),
      "t": np.random.normal(5, 3, N),
    })


General
-------

Let's begin by importing `VerticaPy`.

.. ipython:: python

    import verticapy as vp

Let's also import `numpy` to create a random dataset.

.. ipython:: python

    import numpy as np

Let's generate a dataset using the following data.

.. code-block:: python
    
    N = 20 # Number of records
        
    data = vp.vDataFrame({
      "category": [np.random.choice(['A','B','C']) for _ in range(N)],
      "x": np.random.normal(5, 1, N),
      "y": np.random.normal(8, 1.5, N),
      "z": np.random.normal(10, 2, N),
    })

In the context of data visualization, we have the flexibility to harness multiple plotting libraries to craft a wide range of graphical representations. VerticaPy, as a versatile tool, provides support for several graphic libraries, such as Matplotlib, Highcharts, and Plotly. Each of these libraries offers unique features and capabilities, allowing us to choose the most suitable one for our specific data visualization needs.

.. image:: ../../docs/source/_static/plotting_libs.png
   :width: 80%
   :align: center

.. note::
    
    To select the desired plotting library, we simply need to use the `set_option` function. VerticaPy offers the flexibility to smoothly transition between different plotting libraries. In instances where a particular graphic is not supported by the chosen library or is not supported within the VerticaPy framework, the tool will automatically generate a warning and then switch to an alternative library where the graphic can be created.

Please click on the tabs to view the various graphics generated by the different plotting libraries.

.. ipython:: python
    :suppress:

    import verticapy as vp

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    We can switch to using the `plotly` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "plotly")

    In VerticaPy, you can generate various types of scatter plots by adjusting both the number of elements and the size of the data points (bubbles), providing you with versatile options for visualizing your data.
    
    .. tab:: 2D

      .. tab:: Python

        .. code-block:: python
          
            data.scatter(columns = ["x", "y"])

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k scatter
            SELECT x, y FROM :data;

      .. ipython:: python
          :suppress:
        
          fig = data.scatter(columns = ["x", "y"])
          fig.write_html("figures/plotting_plotly_scatter_2d.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_scatter_2d.html

    .. tab:: 3D

      .. tab:: Python

        .. code-block:: python
          
            data.scatter(columns = ["x", "y", "z"])

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k scatter
            SELECT x, y, z FROM :data;

      .. ipython:: python
          :suppress:

          fig = data.scatter(columns = ["x", "y", "z"])
          fig.write_html("figures/plotting_plotly_scatter_3d.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_scatter_3d.html

    .. tab:: Bubble

      .. tab:: Python

        .. code-block:: python
          
            data.scatter(columns = ["x", "y"], size = "z")

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k bubble
            SELECT x, y, z FROM :data;

      .. ipython:: python
          :suppress:
        
          fig = data.scatter(columns = ["x", "y"], size = "z")
          fig.write_html("figures/plotting_plotly_scatter_bubble.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_scatter_bubble.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    We can switch to using the `highcharts` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "highcharts")

    In VerticaPy, you can generate various types of scatter plots by adjusting both the number of elements and the size of the data points (bubbles), providing you with versatile options for visualizing your data.

    .. tab:: 2D

      .. tab:: Python

        .. code-block:: python
          
            data.scatter(columns = ["x", "y"])

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k scatter
            SELECT x, y FROM :data;

      .. ipython:: python
          :suppress:

          fig = data.scatter(columns = ["x", "y"])
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_scatter_2d")
          with open("figures/plotting_highcharts_scatter_2d.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_scatter_2d.html

    .. tab:: 3D

      .. tab:: Python

        .. code-block:: python
          
            data.scatter(columns = ["x", "y", "z"])

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k scatter
            SELECT x, y, z FROM :data;

      .. ipython:: python
          :suppress:

          fig = data.scatter(columns = ["x", "y", "z"])
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_scatter_3d")
          with open("figures/plotting_highcharts_scatter_3d.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_scatter_3d.html

    .. tab:: Bubble

      .. tab:: Python

        .. code-block:: python
          
            data.scatter(columns = ["x", "y"], size = "z")

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k bubble
            SELECT x, y, z FROM :data;

      .. ipython:: python
          :suppress:

          fig = data.scatter(columns = ["x", "y"], size = "z")
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_scatter_bubble")
          with open("figures/plotting_highcharts_scatter_bubble.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_scatter_bubble.html
            
.. tab:: Matplotlib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    We can switch to using the `matplotlib` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "matplotlib")

    In VerticaPy, you can generate various types of scatter plots by adjusting both the number of elements and the size of the data points (bubbles), providing you with versatile options for visualizing your data.

    .. tab:: 2D

      .. tab:: Python

        .. ipython:: python
            :okwarning:

            @savefig plotting_matplotlib_scatter_2d.png
            data.scatter(columns = ["x", "y"])

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k scatter
            SELECT x, y FROM :data;

        .. image:: ../../docs/source/savefig/plotting_matplotlib_scatter_2d.png
            :width: 100%
            :align: center

    .. tab:: 3D

      .. tab:: Python

        .. ipython:: python
            :okwarning:

            @savefig plotting_matplotlib_scatter_3d.png
            data.scatter(columns = ["x", "y", "z"])

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k scatter
            SELECT x, y, z FROM :data;

        .. image:: ../../docs/source/savefig/plotting_matplotlib_scatter_3d.png
            :width: 100%
            :align: center

    .. tab:: Bubble

      .. tab:: Python

        .. ipython:: python
            :okwarning:

            @savefig plotting_matplotlib_scatter_bubble.png
            data.scatter(columns = ["x", "y"], size = "z")

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k bubble
            SELECT x, y, z FROM :data;

        .. image:: ../../docs/source/savefig/plotting_matplotlib_scatter_bubble.png
            :width: 100%
            :align: center

_________________________________________________________________

PCA-Enhanced Scatter Plot for Multidimensional Data Visualization
-----------------------------------------------------------------

In VerticaPy, when dealing with high-dimensional data, you have the option to utilize Principal Component Analysis (PCA) for visualization purposes. VerticaPy will automatically perform the PCA transformation, and you can specify the components you wish to visualize using the "dimensions" parameter.

.. note::

    PCA reductions are exclusively accessible through the vDataFrame object.

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib","plotly")

    **Using PCA components 1 & 2**

    .. code-block:: python
        
        data.scatter(columns = ["x", "y", "z", "t"], dimensions = (1, 2))

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y", "z", "t"], dimensions = (1, 2))
        fig.write_html("figures/plotting_plotly_scatter_pca_1.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_scatter_pca_1.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Using PCA components 1 & 2**

    .. code-block:: python
              
        data.scatter(columns = ["x", "y", "z", "t"], dimensions = (1, 2))

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y", "z", "t"], dimensions = (1, 2))
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_scatter_pca_1")
        with open("figures/plotting_highcharts_scatter_pca_1.html", "w") as file:
          file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_scatter_pca_1.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Using PCA components 1 & 2**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_scatter_pca_1.png
        data.scatter(columns = ["x", "y", "z", "t"], dimensions = (1, 2))

________________________________________________________________

Using Categorical and Numerical Columns for Color Representation 
----------------------------------------------------------------

Scatter plots offer a versatile way to incorporate categorical information into your visualizations. By employing a categorical column, you can effectively represent various distinct categories within the data, with each category being visually differentiated through the use of different colors, providing a clear and intuitive representation of relationships and patterns.

.. note::

    Enhance your scatter plots with color representation in VerticaPy. Use categorical columns to assign unique colors or employ numerical columns with a customizable colormap (cmap) for a visually rich and informative data visualization experience.

.. hint::

    In SQL, when dealing with categorical data, it's important to accurately represent different categories. Consider casting one of the columns as categorical using the `::VARCHAR` operator for better data handling.

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib","plotly")

    **Using a Categorical Column**

    .. tab:: Python

      .. code-block:: python
        
          data.scatter(columns = ["x", "y"], by = "category")

    .. tab:: SQL

      .. code-block:: sql
            
          %%chart -k scatter
          SELECT x, y, category FROM :data;

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y"], by = "category")
        fig.write_html("figures/plotting_plotly_scatter_cat_1.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_scatter_cat_1.html

    **Using a CMAP**

    .. code-block:: python
        
        data.scatter(columns = ["x", "y"], cmap_col = "z")

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y"], cmap_col = "z")
        fig.write_html("figures/plotting_plotly_scatter_cat_2.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_scatter_cat_2.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Using a Categorical Column**

    .. tab:: Python

      .. code-block:: python
        
          data.scatter(columns = ["x", "y"], by = "category")

    .. tab:: SQL

      .. code-block:: sql
            
          %%chart -k scatter
          SELECT x, y, category FROM :data;

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y"], by = "category")
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_scatter_cat_1")
        with open("figures/plotting_highcharts_scatter_cat_1.html", "w") as file:
          file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_scatter_cat_1.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Using a Categorical Column**

    .. tab:: Python

      .. ipython:: python
          :okwarning:
        
          @savefig plotting_matplotlib_scatter_cat_1.png
          data.scatter(columns = ["x", "y"], by = "category")

    .. tab:: SQL

      .. code-block:: sql
            
          %%chart -k scatter
          SELECT x, y, category FROM :data;

      .. image:: ../../docs/source/savefig/plotting_matplotlib_scatter_cat_1.png
            :width: 100%
            :align: center

    **Using a CMAP**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_scatter_cat_2.png
        data.scatter(columns = ["x", "y"], cmap_col = "z")

___________________


Chart Customization
-------------------

VerticaPy empowers users with a high degree of flexibility when it comes to tailoring the visual aspects of their plots. 
This customization extends to essential elements such as **color schemes**, **text labels**, and **plot sizes**, as well as a wide range of other attributes that can be fine-tuned to align with specific design preferences and analytical requirements. Whether you want to make your visualizations more visually appealing or need to convey specific insights with precision, VerticaPy's customization options enable you to craft graphics that suit your exact needs.

.. hint::

    For SQL users who use Jupyter Magic cells, chart customization must be done in Python. They can then export the graphic using the last magic cell result.

    .. code-block:: python

        chart = _

    Now, the chart variable includes the graphic. Depending on the library you are using, you will obtain a different object.

.. Important:: Different customization parameters are available for Plotly, Highcharts, and Matplotlib. 
    For a comprehensive list of customization features, please consult the documentation of the respective 
    libraries: `plotly <https://plotly.com/python-api-reference/>`_, `matplotlib <https://matplotlib.org/stable/api/matplotlib_configuration_api.html>`_ and `highcharts <https://api.highcharts.com/highcharts/>`_.

Colors
~~~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom colors**

    .. code-block:: python
        
        fig = data.scatter(columns = ["x", "y"])
        fig.update_traces(marker = dict(color="red"))

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y"])
        fig.update_traces(marker = dict(color = "red"))
        fig.write_html("figures/plotting_plotly_scatter_custom_color_1.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_scatter_custom_color_1.html

    **Custom colors mapping for categories**

    .. note:: You can leverage all the capabilities of the Plotly object, including functions like `update_trace`.

    .. code-block:: python
        
        fig = data.scatter(columns = ["x", "y"], by = "category")
        new_colors = ["red", "orange","green"]
        for trace_index, new_color in enumerate(new_colors):
            if trace_index < len(fig.data):
                fig.data[trace_index].marker.color = new_color

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y"], by = "category")
        new_colors = ["red", "orange","green"]
        for trace_index, new_color in enumerate(new_colors):
            if trace_index < len(fig.data):
                fig.data[trace_index].marker.color = new_color                                           
        fig.write_html("figures/plotting_plotly_scatter_custom_color_2.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_scatter_custom_color_2.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom colors**

    .. code-block:: python
        
        data.scatter(columns = ["x", "y"], colors = ["green"])

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y"], colors = ["green"])
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_scatter_custom_color_1")
        with open("figures/plotting_highcharts_scatter_custom_color_1.html", "w") as file:
            file.write(html_text)


    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_scatter_custom_color_1.html

    **Custom colors mapping for categories**

    .. code-block:: python
        
        data.scatter(columns = ["x", "y", "z"], by = "category", colors = ["red", "orange", "green"])

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y", "z"], by = "category", colors = ["red", "orange", "green"])
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_scatter_custom_color_2")
        with open("figures/plotting_highcharts_scatter_custom_color_2.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_scatter_custom_color_2.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom colors**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_scatter_custom_color_1.png
        data.scatter(columns = ["x", "y"], color = ["red"])

    **Custom colors mapping for categories**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_scatter_custom_color_2.png
        data.scatter(columns = ["x", "y", "z"], by = "category", colors = ["red", "orange", "green"])

____

Size
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    Custom Width and Height.

    .. code-block:: python
        
        data.scatter(columns = ["x", "y"], width = 300, height = 300)

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y"], width = 300, height = 300)
        fig.write_html("figures/plotting_plotly_scatter_custom_size.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_scatter_custom_size.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    Custom Width and Height.

    .. code-block:: python
        
        data.scatter(columns = ["x", "y"], width = 500, height = 200)

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y"], width = 500, height = 200)
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_scatter_custom_size")
        with open("figures/plotting_highcharts_scatter_custom_size.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_scatter_custom_size.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    Custom Width and Height.

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_scatter_1D_custom_size.png
        data.scatter(columns = ["x", "y"], width = 6, height = 3)

_____


Text
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom Title**

    .. code-block:: python
        
        data.scatter(columns = ["x", "y"]).update_layout(title_text = "Custom Title")

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y"]).update_layout(title_text = "Custom Title")
        fig.write_html("figures/plotting_plotly_scatter_custom_main_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_scatter_custom_main_title.html

    **Custom Legend Title Text**

    .. code-block:: python

        data.scatter(columns = ["x", "y"], by = 'z', legend_title_text = "Custom Legend")

    .. ipython:: python
        :suppress:

        data.scatter(columns = ["x", "y"], by = 'z', legend_title_text = "Custom Legend")
        fig.write_html("figures/plotting_plotly_scatter_custom_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_scatter_custom_title.html

    **Custom Axis Titles**

    .. code-block:: python
        
        data.scatter(columns = ["x", "y"], yaxis_title = "Custom Y-Axis Title")

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y"], yaxis_title = "Custom Y-Axis Title")
        fig.write_html("figures/plotting_plotly_scatter_custom_y_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_scatter_custom_y_title.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom Title Text**

    .. code-block:: python
        
        data.scatter(columns = ["x", "y"], title = {"text": "Custom Title"})

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y"], title = {"text": "Custom Title"})
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_scatter_custom_text_title")
        with open("figures/plotting_highcharts_scatter_custom_text_title.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_scatter_custom_text_title.html

    **Custom Axis Titles**

    .. code-block:: python
        
        data.scatter(columns = ["x", "y"], xAxis = {"title": {"text": "Custom X-Axis Title"}})

    .. ipython:: python
        :suppress:

        fig = data.scatter(columns = ["x", "y"], xAxis = {"title": {"text": "Custom X-Axis Title"}})
        html_text = fig.htmlcontent.replace("container","plotting_highcharts_scatter_custom_text_xtitle")
        with open("figures/plotting_highcharts_scatter_custom_text_xtitle.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_scatter_custom_text_xtitle.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom Title Text**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_scatter_custom_title_label.png
        data.scatter(columns = ["x", "y"]).set_title("Custom Title")

    **Custom Axis Titles**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_scatter_custom_yaxis_label.png
        data.scatter(columns = ["x", "y"]).set_ylabel("Custom Y Axis")

_____

