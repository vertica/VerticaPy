.. _chart_gallery.voronoi_plot:

================================
Machine Learning - Voronoi Plots
================================

.. Necessary Code Elements

.. ipython:: python
    :suppress:

    import verticapy as vp
    import verticapy.machine_learning.vertica as vml
    import numpy as np

    N = 100 # Number of Records
    k = 10 # step

    # Normal Distributions
    x = np.random.normal(5, 1, round(N / 2))
    y = np.random.normal(3, 1, round(N / 2))

    # Creating a vDataFrame with two clusters
    data = vp.vDataFrame({
        "x": np.concatenate([x, x + k]),
        "y": np.concatenate([y, y + k]),
    })

    # Defining the KMEANS Model
    model = vml.KMeans()

    # Fitting the KMEANS model
    model.fit(data, ["x", "y"])

General
-------

VerticaPy's Voronoi plot functionality offers a powerful visualization tool for understanding spatial distribution and proximity within your data. By dividing a space into cells based on the closest data point, Voronoi plots reveal the geometric relationships and patterns among data points in two-dimensional space. This visualization technique is especially valuable in spatial analysis, clustering, and nearest neighbor applications, providing a clear and intuitive representation of data point relationships and spatial structures. With VerticaPy's Voronoi plots, data analysts can gain deeper insights into their datasets and make informed decisions based on spatial patterns and distributions.

Let's begin by importing `VerticaPy`.

.. ipython:: python

    import verticapy as vp

Let's also import `numpy` to create a random dataset.

.. ipython:: python

    import numpy as np

Let's generate a dataset using the following data.

.. code-block:: python
        
    N = 100 # Number of Records
    k = 10 # step

    # Normal Distributions
    x = np.random.normal(5, 1, round(N / 2))
    y = np.random.normal(3, 1, round(N / 2))

    # Creating a vDataFrame with two clusters
    data = vp.vDataFrame({
        "x": np.concatenate([x, x + k]),
        "y": np.concatenate([y, y + k]),
    })

Let's proceed by fitting a KMeans model.

.. code-block:: python
    
    # Importing the Vertica ML module
    import verticapy.machine_learning.vertica as vml

    # Defining the KMEANS Model
    model = vml.KMeans()

    # Fitting the KMEANS model
    model.fit(data, ["x", "y"])

In the context of data visualization, we have the flexibility to harness multiple plotting libraries to craft a wide range of graphical representations. VerticaPy, as a versatile tool, provides support for several graphic libraries, such as Matplotlib, Highcharts, and Plotly. Each of these libraries offers unique features and capabilities, allowing us to choose the most suitable one for our specific data visualization needs.

.. image:: ../../docs/source/_static/plotting_libs.png
   :width: 80%
   :align: center

.. note::
    
    To select the desired plotting library, we simply need to use the `set_option` function. VerticaPy offers the flexibility to smoothly transition between different plotting libraries. In instances where a particular graphic is not supported by the chosen library or is not supported within the VerticaPy framework, the tool will automatically generate a warning and then switch to an alternative library where the graphic can be created.

.. warning::

    VerticaPy does not provide Voronoi plots for the Highchart API due to the lack of support for this type of plot in Highcharts.

Please click on the tabs to view the various graphics generated by the different plotting libraries.

.. ipython:: python
    :suppress:

    import verticapy as vp

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    We can switch to using the `plotly` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "plotly")

    .. code-block:: python
          
        model.plot_voronoi()

    .. ipython:: python
        :suppress:
        
        fig = model.plot_voronoi()
        fig.write_html("figures/plotting_plotly_voronoi_1.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_voronoi_1.html

.. tab:: Matplotlib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    We can switch to using the `matplotlib` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "matplotlib")

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_voronoi_1.png
        model.plot_voronoi()

___________________


Chart Customization
-------------------

VerticaPy empowers users with a high degree of flexibility when it comes to tailoring the visual aspects of their plots. 
This customization extends to essential elements such as **color schemes**, **text labels**, and **plot sizes**, as well as a wide range of other attributes that can be fine-tuned to align with specific design preferences and analytical requirements. Whether you want to make your visualizations more visually appealing or need to convey specific insights with precision, VerticaPy's customization options enable you to craft graphics that suit your exact needs.

.. Important:: Different customization parameters are available for Plotly, Highcharts, and Matplotlib. 
    For a comprehensive list of customization features, please consult the documentation of the respective 
    libraries: `plotly <https://plotly.com/python-api-reference/>`_, `matplotlib <https://matplotlib.org/stable/api/matplotlib_configuration_api.html>`_ and `highcharts <https://api.highcharts.com/highcharts/>`_.

Colors
~~~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom colors**

    .. code-block:: python
        
        model.plot_voronoi(colors = ["red", "blue"])

    .. .. ipython:: python
    ..     :suppress:

    ..     fig = model.plot_voronoi(colors = ["red", "blue"])
    ..     fig.write_html("figures/plotting_plotly_plot_voronoi_custom_color_1.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_plot_voronoi_custom_color_1.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom colors**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_plot_voronoi_custom_color_1.png
        model.plot_voronoi(colors = ["red", "blue"])

____

Size
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom Width and Height**

    .. code-block:: python
        
        model.plot_voronoi(width = 300, height = 300)

    .. ipython:: python
        :suppress:

        fig = model.plot_voronoi(width = 300, height = 300)
        fig.write_html("figures/plotting_plotly_plot_voronoi_custom_size.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_plot_voronoi_custom_size.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom Width and Height**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_plot_voronoi_single_custom_size.png
        model.plot_voronoi(width = 6, height = 3)

_____


Text
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom Title**

    .. code-block:: python
        
        model.plot_voronoi().update_layout(title_text = "Custom Title")

    .. ipython:: python
        :suppress:

        fig = model.plot_voronoi().update_layout(title_text = "Custom Title")
        fig.write_html("figures/plotting_plotly_plot_voronoi_custom_main_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_plot_voronoi_custom_main_title.html


    **Custom Axis Titles**

    .. code-block:: python
        
        model.plot_voronoi(yaxis_title = "Custom Y-Axis Title")

    .. ipython:: python
        :suppress:

        fig = model.plot_voronoi(yaxis_title = "Custom Y-Axis Title")
        fig.write_html("figures/plotting_plotly_plot_voronoi_custom_y_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_plot_voronoi_custom_y_title.html



_____

