.. _chart_gallery.pie:

=========
Pie Chart
=========

.. Necessary Code Elements

.. ipython:: python
    :suppress:

    import verticapy as vp
    import numpy as np

    N = 100 # Number of Records

    data = vp.vDataFrame({
      "animal": [np.random.choice(['Dog','Cat','Rabbit']) for _ in range(N)],
      "color": [np.random.choice(['Black','White']) for _ in range(N)],
      "number": np.random.normal(5, 1, 100),
    })


General
-------

Let's begin by importing `VerticaPy`.

.. ipython:: python

    import verticapy as vp

Let's also import `numpy` to create a random dataset.

.. ipython:: python

    import numpy as np

Let's generate a dataset using the following data.

.. code-block:: python

    N = 100
        
    data = vp.vDataFrame({
      "animal": [np.random.choice(['Dog','Cat','Rabbit']) for _ in range(N)],
      "color": [np.random.choice(['Black','White']) for _ in range(N)],
    })

In the context of data visualization, we have the flexibility to harness multiple plotting libraries to craft a wide range of graphical representations. VerticaPy, as a versatile tool, provides support for several graphic libraries, such as Matplotlib, Highcharts, and Plotly. Each of these libraries offers unique features and capabilities, allowing us to choose the most suitable one for our specific data visualization needs.

.. image:: ../../docs/source/_static/plotting_libs.png
   :width: 80%
   :align: center

.. note::
    
    To select the desired plotting library, we simply need to use the `set_option` function. VerticaPy offers the flexibility to smoothly transition between different plotting libraries. In instances where a particular graphic is not supported by the chosen library or is not supported within the VerticaPy framework, the tool will automatically generate a warning and then switch to an alternative library where the graphic can be created.

Please click on the tabs to view the various graphics generated by the different plotting libraries.

.. ipython:: python
    :suppress:

    import verticapy as vp

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    We can switch to using the `plotly` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "plotly")

    In VerticaPy, you can create a diverse range of pie charts, including the option to generate nested pie charts for more complex data representations.
    
    .. tab:: Regular

      .. tab:: Python  

        .. code-block:: python
            
            data["animal"].pie()

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k pie
            SELECT animal, COUNT(*) FROM :data GROUP BY 1;
        
      .. ipython:: python
          :suppress:
        
          fig = data["animal"].pie()
          fig.write_html("figures/plotting_plotly_pie_regular.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_pie_regular.html

    .. tab:: Donut

      .. tab:: Python  

        .. code-block:: python
            
            data["animal"].pie(kind = "donut")

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k donut
            SELECT animal, COUNT(*) FROM :data GROUP BY 1;

      .. ipython:: python
          :suppress:
        
          fig = data["animal"].pie(kind = "donut")
          fig.write_html("figures/plotting_plotly_pie_donut.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_pie_donut.html

    .. tab:: Nested

      .. tab:: Python  

        .. code-block:: python
            
            data.pie(columns = ["animal", "color"])

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k nested_pie
            SELECT animal, color, COUNT(*) FROM :data GROUP BY ROLLUP (1, 2);

      .. ipython:: python
          :suppress:

          fig = data.pie(columns = ["animal", "color"])
          fig.write_html("figures/plotting_plotly_pie_nested.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_pie_nested.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    We can switch to using the `highcharts` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "highcharts")

    In VerticaPy, you can create a diverse range of pie charts, including the option to generate nested pie charts for more complex data representations.

    .. tab:: Regular

      .. tab:: Python  

        .. code-block:: python
            
            data["animal"].pie()

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k pie
            SELECT animal, COUNT(*) FROM :data GROUP BY 1;

      .. ipython:: python
          :suppress:

          fig = data["animal"].pie()
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_pie_regular")
          with open("figures/plotting_highcharts_pie_regular.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_pie_regular.html

    .. tab:: Donut

      .. tab:: Python  

        .. code-block:: python
            
            data["animal"].pie(kind = "donut")

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k donut
            SELECT animal, COUNT(*) FROM :data GROUP BY 1;

      .. ipython:: python
          :suppress:

          fig = data["animal"].pie(kind = "donut")
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_pie_donut")
          with open("figures/plotting_highcharts_pie_donut.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_pie_donut.html

    .. tab:: Rose

      .. tab:: Python  

        .. code-block:: python
            
            data["animal"].pie(kind = "rose")

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k rose
            SELECT animal, COUNT(*) FROM :data GROUP BY 1;

      .. ipython:: python
          :suppress:

          fig = data["animal"].pie(kind = "rose")
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_pie_rose")
          with open("figures/plotting_highcharts_pie_rose.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_pie_rose.html

    .. tab:: 3D

      .. code-block:: python
          
          data["animal"].pie(kind = "3d")

      .. ipython:: python
          :suppress:

          fig = data["animal"].pie(kind = "3d")
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_pie_3d")
          with open("figures/plotting_highcharts_pie_3d.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_pie_3d.html

    .. tab:: Nested

      .. tab:: Python  

        .. code-block:: python
            
            data.pie(columns = ["animal", "color"])

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k nested_pie
            SELECT animal, color, COUNT(*) FROM :data GROUP BY ROLLUP (1, 2);

      .. ipython:: python
          :suppress:

          fig = data.pie(columns = ["animal", "color"])
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_pie_nested")
          with open("figures/plotting_highcharts_pie_nested.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_pie_nested.html
            
.. tab:: Matplotlib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    We can switch to using the `matplotlib` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "matplotlib")

    In VerticaPy, you can create a diverse range of pie charts, including the option to generate nested pie charts for more complex data representations.

    .. tab:: Regular

      .. tab:: Python  

        .. ipython:: python
            :okwarning:

            @savefig plotting_matplotlib_pie_regular.png
            data["animal"].pie()

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k pie
            SELECT animal, COUNT(*) FROM :data GROUP BY 1;

        .. image:: ../../docs/source/savefig/plotting_matplotlib_pie_regular.png
            :width: 100%
            :align: center

    .. tab:: Donut

      .. tab:: Python  

        .. ipython:: python
            :okwarning:

            @savefig plotting_matplotlib_pie_donut.png
            data["animal"].pie(kind = "donut")

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k donut
            SELECT animal, COUNT(*) FROM :data GROUP BY 1;

        .. image:: ../../docs/source/savefig/plotting_matplotlib_pie_donut.png
            :width: 100%
            :align: center

    .. tab:: Rose

      .. tab:: Python  

        .. ipython:: python
            :okwarning:

            @savefig plotting_matplotlib_pie_rose.png
            data["animal"].pie(kind = "rose")

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k rose
            SELECT animal, COUNT(*) FROM :data GROUP BY 1;

        .. image:: ../../docs/source/savefig/plotting_matplotlib_pie_rose.png
            :width: 100%
            :align: center

    .. tab:: Nested

      .. tab:: Python  

        .. ipython:: python
            :okwarning:

            @savefig plotting_matplotlib_pie_nested.png
            data.pie(columns = ["animal", "color"])

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k nested_pie
            SELECT animal, color, COUNT(*) FROM :data GROUP BY ROLLUP (1, 2);

        .. image:: ../../docs/source/savefig/plotting_matplotlib_pie_nested.png
            :width: 100%
            :align: center

___________________

Custom Aggregations
-------------------

Within the VerticaPy framework, you have the flexibility to apply a wide array of aggregation techniques according to your specific analytical needs. This extends to the option of utilizing SQL statements, allowing you to craft custom aggregations that precisely match your data summarization requirements. VerticaPy empowers you with the versatility to aggregate data in the manner that best serves your analytical objectives.

.. note::

    In SQL, aggregations can be computed directly within the input SQL statement, but in Python, the process is a bit different.

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib","plotly")

    **General Options**

    .. code-block:: python
        
        data["animal"].pie(method = "sum", of = "number")

    .. ipython:: python
        :suppress:

        fig = data["animal"].pie(method = "sum", of = "number")
        fig.write_html("figures/plotting_plotly_pie_custom_agg_1.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_pie_custom_agg_1.html

    .. note:: VerticaPy simplifies the usage of aggregations, such as percentiles. You only need to specify the percentile number without a decimal point to compute it. For instance, 50% for the median, 75% for the third quartile, and 99% for the last percentile.

    **Direct SQL statement**

    .. note:: You are free to utilize any SQL statement as long as it is compatible with the supported features of VerticaPy.

    .. code-block:: python
        
        data["animal"].pie(method = "SUM(number) AS total")

    .. ipython:: python
        :suppress:

        fig = data["animal"].pie(method = "SUM(number) AS total")
        fig.write_html("figures/plotting_plotly_pie_custom_agg_2.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_pie_custom_agg_2.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **General Options**

    .. code-block:: python
              
        data["animal"].pie(method = "sum", of = "number")

    .. ipython:: python
        :suppress:

        fig = data["animal"].pie(method = "sum", of = "number")
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_pie_custom_agg_1")
        with open("figures/plotting_highcharts_pie_custom_agg_1.html", "w") as file:
          file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_pie_custom_agg_1.html

    .. note:: VerticaPy simplifies the usage of aggregations, such as percentiles. You only need to specify the percentile number without a decimal point to compute it. For instance, 50% for the median, 75% for the third quartile, and 99% for the last percentile.

    **Direct SQL statement**

    .. note:: You are free to utilize any SQL statement as long as it is compatible with the supported features of VerticaPy.

    .. code-block:: python
              
        data["animal"].pie(method = "SUM(number) AS total")

    .. ipython:: python
        :suppress:

        fig = data["animal"].pie(method = "SUM(number) AS total")
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_pie_custom_agg_2")
        with open("figures/plotting_highcharts_pie_custom_agg_2.html", "w") as file:
          file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_pie_custom_agg_2.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **General Options**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_pie_custom_agg_1.png
        data["animal"].pie(method = "sum", of = "number")

    .. note:: VerticaPy simplifies the usage of aggregations, such as percentiles. You only need to specify the percentile number without a decimal point to compute it. For instance, 50% for the median, 75% for the third quartile, and 99% for the last percentile.

    **Direct SQL statement**

    .. note:: You are free to utilize any SQL statement as long as it is compatible with the supported features of VerticaPy.

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_pie_custom_agg_2.png
        data["animal"].pie(method = "SUM(number) AS total")

___________________


Chart Customization
-------------------

VerticaPy empowers users with a high degree of flexibility when it comes to tailoring the visual aspects of their plots. 
This customization extends to essential elements such as **color schemes**, **text labels**, and **plot sizes**, as well as a wide range of other attributes that can be fine-tuned to align with specific design preferences and analytical requirements. Whether you want to make your visualizations more visually appealing or need to convey specific insights with precision, VerticaPy's customization options enable you to craft graphics that suit your exact needs.

.. hint::

    For SQL users who use Jupyter Magic cells, chart customization must be done in Python. They can then export the graphic using the last magic cell result.

    .. code-block:: python

        chart = _

    Now, the chart variable includes the graphic. Depending on the library you are using, you will obtain a different object.

.. Important:: Different customization parameters are available for Plotly, Highcharts, and Matplotlib. 
    For a comprehensive list of customization features, please consult the documentation of the respective 
    libraries: `plotly <https://plotly.com/python-api-reference/>`_, `matplotlib <https://matplotlib.org/stable/api/matplotlib_configuration_api.html>`_ and `highcharts <https://api.highcharts.com/highcharts/>`_.

Colors
~~~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom colors for 1D**

    .. code-block:: python
        
        fig = data["animal"].pie()
        fig.update_traces(marker = dict(colors=["red"]))

    .. ipython:: python
        :suppress:

        fig = data["animal"].pie()
        fig.update_traces(marker = dict(colors = ["red"]))
        fig.write_html("figures/plotting_plotly_pie_custom_color_1.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_pie_custom_color_1.html

    **Custom colors mapping for categories**

    .. hint:: You can leverage all the capabilities of the Plotly object, including functions like `update_trace` and 'update_layout'.

    .. code-block:: python
        
        fig = data.pie(columns = ["animal", "color"], colors=["red", "orange", "green", "blue", "yellow"])
        

    .. ipython:: python
        :suppress:

        fig = data.pie(columns = ["animal", "color"], colors=["red", "orange", "green", "blue", "yellow"])
                                        
        fig.write_html("figures/plotting_plotly_pie_custom_color_2.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_pie_custom_color_2.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom colors for 1D**

    .. code-block:: python
        
        data["animal"].pie(colors = ["green","blue","pink"])

    .. ipython:: python
        :suppress:

        fig = data["animal"].pie(colors = ["green","blue","pink"])
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_pie_custom_color_1")
        with open("figures/plotting_highcharts_pie_custom_color_1.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_pie_custom_color_1.html

    **Custom colors mapping for categories**

    .. code-block:: python
        
        data.pie(columns = ["animal", "color"], colors = ["red", "orange", "green", "blue", "yellow"])

    .. ipython:: python
        :suppress:

        fig = data.pie(columns = ["animal", "color"], colors = ["red", "orange", "green", "blue", "yellow"])
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_pie_custom_color_2")
        with open("figures/plotting_highcharts_pie_custom_color_2.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_pie_custom_color_2.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom colors for 1D**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_pie_custom_color_1.png
        data["animal"].pie(colors = ["red"])

    **Custom colors mapping for categories**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_pie_custom_color_2.png
        data.pie(columns = ["animal", "color"], colors = ["red", "orange", "green", "blue", "yellow"])

____________

Size
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    Custom Width and Height.

    .. code-block:: python
        
        data.pie(columns = ["animal", "color"], width = 300, height = 300)

    .. ipython:: python
        :suppress:

        fig = data.pie(columns = ["animal", "color"], width = 300, height = 300)
        fig.write_html("figures/plotting_plotly_pie_custom_size.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_pie_custom_size.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    Custom Width and Height.

    .. code-block:: python
        
        data["animal"].pie(width = 500, height = 200)

    .. ipython:: python
        :suppress:

        fig = data["animal"].pie(width = 500, height = 200)
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_pie_custom_size")
        with open("figures/plotting_highcharts_pie_custom_size.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_pie_custom_size.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    Custom Width and Height.

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_pie_1D_custom_size.png
        data["animal"].pie(width = 6, height = 3)

____________


Text
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom Title**

    .. code-block:: python
        
        data["animal"].pie().update_layout(title_text = "Custom Title")

    .. ipython:: python
        :suppress:

        fig = data["animal"].pie().update_layout(title_text = "Custom Title")
        fig.write_html("figures/plotting_plotly_pie_custom_main_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_pie_custom_main_title.html

    **Custom Legend Title Text**

    .. code-block:: python
        
        data["animal"].pie(legend_title_text = "Custom Legend")

    .. ipython:: python
        :suppress:

        fig = data["animal"].pie(legend_title_text = "Custom Legend")
        fig.write_html("figures/plotting_plotly_pie_custom_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_pie_custom_title.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom Title Text**

    .. code-block:: python
        
        data["animal"].pie(title = {"text": "Custom Title"})

    .. ipython:: python
        :suppress:

        fig = data["animal"].pie(title = {"text": "Custom Title"})
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_pie_custom_text_title")
        with open("figures/plotting_highcharts_pie_custom_text_title.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_pie_custom_text_title.html


.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom Title Text**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_pie_custom_title_label.png
        data["animal"].pie().set_title("Custom Title")

____________
