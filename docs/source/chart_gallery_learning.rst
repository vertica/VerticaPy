.. _chart_gallery.learning:

==============
Learning Curve
==============

.. Necessary Code Elements

.. ipython:: python
    :suppress:
    :okwarning:

    import random
    import verticapy as vp
    import verticapy.machine_learning.model_selection as vms
    import verticapy.machine_learning.vertica as vml
    import numpy as np

    N = 500 # Number of Records
    k = 10 # step

    # Normal Distributions
    x = np.random.normal(5, 1, round(N / 2))
    y = np.random.normal(3, 1, round(N / 2))
    z = np.random.normal(3, 1, round(N / 2))

    # Creating a vDataFrame with two clusters
    data = vp.vDataFrame({"x": np.concatenate([x, x + k]), "y": np.concatenate([y, y + k]), "z": np.concatenate([z, z + k]),"c": [random.randint(0, 1) for _ in range(N)]})

    # Defining the Model
    model = vml.RandomForestClassifier()

General
-------

VerticaPy's Learning Curve tool is an essential asset for evaluating machine learning models. It enables users to visualize a model's performance by plotting key metrics against varying training dataset sizes. By analyzing these curves, data analysts can identify issues such as overfitting or underfitting, make informed decisions about dataset size, and optimize model performance. This feature plays a crucial role in enhancing model robustness and facilitating data-driven decision-making.

Let's begin by importing `VerticaPy`.

.. ipython:: python

    import verticapy as vp

Let's generate a dataset using the following data.

.. code-block:: python
        
    import random
    
    N = 500 # Number of Records
    k = 10 # step

    # Normal Distributions
    x = np.random.normal(5, 1, round(N / 2))
    y = np.random.normal(3, 1, round(N / 2))
    z = np.random.normal(3, 1, round(N / 2))

    # Creating a vDataFrame with two clusters
    data = vp.vDataFrame({
        "x": np.concatenate([x, x + k]),
        "y": np.concatenate([y, y + k]),
        "z": np.concatenate([z, z + k]),
        "c": [random.randint(0, 1) for _ in range(N)]
    })

Let's proceed by creating a Random Forest Classifier model using the complete dataset.

.. code-block:: python
    
    # Importing the Vertica ML module
    import verticapy.machine_learning.vertica as vml

    # Importing the model selection module
    import verticapy.machine_learning.model_selection as vms

    # Defining the Model
    model = vml.RandomForestClassifier()

In the context of data visualization, we have the flexibility to harness multiple plotting libraries to craft a wide range of graphical representations. VerticaPy, as a versatile tool, provides support for several graphic libraries, such as Matplotlib, Highcharts, and Plotly. Each of these libraries offers unique features and capabilities, allowing us to choose the most suitable one for our specific data visualization needs.

.. image:: ../../docs/source/_static/plotting_libs.png
   :width: 80%
   :align: center

.. note::
    
    To select the desired plotting library, we simply need to use the `set_option` function. VerticaPy offers the flexibility to smoothly transition between different plotting libraries. In instances where a particular graphic is not supported by the chosen library or is not supported within the VerticaPy framework, the tool will automatically generate a warning and then switch to an alternative library where the graphic can be created.

Please click on the tabs to view the various graphics generated by the different plotting libraries.

.. ipython:: python
    :suppress:

    import verticapy as vp

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    We can switch to using the `plotly` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "plotly")
    
    .. tab:: Efficiency

      .. code-block:: python
          
          fig = vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "efficiency",
            cv = 3,
            metric = "auc",
            return_chart = True,
          )
          fig

      .. ipython:: python
          :suppress:
          :okwarning:
        
          fig = vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "efficiency",
            cv = 3,
            metric = "auc",
            return_chart = True,
          )
          fig.write_html("figures/plotting_plotly_learning_efficiency.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_learning_efficiency.html

    .. tab:: Scalability

      .. code-block:: python
          
          fig = vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "scalability",
            cv = 3,
            metric = "auc",
            return_chart = True,
          )
          fig

      .. ipython:: python
          :suppress:
          :okwarning:

          fig = vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "scalability",
            cv = 3,
            metric = "auc",
            return_chart = True,
          )
          fig.write_html("figures/plotting_plotly_learning_scalability.html")

      .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_learning_scalability.html

    .. tab:: Performance

      .. code-block:: python
          
          fig = vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "performance",
            cv = 3,
            metric = "auc",
            return_chart = True,
          )
          fig

      .. ipython:: python
          :suppress:
          :okwarning:

          fig = vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "performance",
            cv = 3,
            metric = "auc",
            return_chart = True,
          )
          fig.write_html("figures/plotting_plotly_learning_performance.html")

      .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_learning_performance.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    We can switch to using the `highcharts` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "highcharts")

    .. tab:: Efficiency

      .. code-block:: python
          
          fig = vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "efficiency",
            cv = 3,
            metric = "auc",
            return_chart = True,
          )
          fig

      .. ipython:: python
          :suppress:
          :okwarning:

          fig = vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "efficiency",
            cv = 3,
            metric = "auc",
            return_chart = True,
          )
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_learning_efficiency")
          with open("figures/plotting_highcharts_learning_efficiency.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_learning_efficiency.html

    .. tab:: Scalability

      .. code-block:: python
          
          fig = vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "scalability",
            cv = 3,
            metric = "auc",
            return_chart = True,
          )
          fig

      .. ipython:: python
          :suppress:
          :okwarning:

          fig = vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "scalability",
            cv = 3,
            metric = "auc",
            return_chart = True,
          )
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_learning_scalability")
          with open("figures/plotting_highcharts_learning_scalability.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_learning_scalability.html

    .. tab:: Performance

      .. code-block:: python
          
          fig = vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "performance",
            cv = 3,
            metric = "auc",
            return_chart = True,
          )
          fig

      .. ipython:: python
          :suppress:
          :okwarning:

          fig = vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "performance",
            cv = 3,
            metric = "auc",
            return_chart = True,
          )
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_learning_performance")
          with open("figures/plotting_highcharts_learning_performance.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_learning_performance.html
        
.. tab:: Matplotlib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    We can switch to using the `matplotlib` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "matplotlib")

    .. tab:: Efficiency

      .. ipython:: python
         :okwarning:

          @savefig plotting_matplotlib_learning_efficiency.png
          vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "efficiency",
            cv = 3,
            metric = "auc",
          )
        
    .. tab:: Scalability

      .. ipython:: python
         :okwarning:

          @savefig plotting_matplotlib_learning_scalability.png
          vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "scalability",
            cv = 3,
            metric = "auc",
          )

    .. tab:: Performance

      .. ipython:: python
         :okwarning:

          @savefig plotting_matplotlib_learning_performance.png
          vms.learning_curve(
            model,
            data,
            X = ["x", "y", "z"],
            y = "c",
            method = "performance",
            cv = 3,
            metric = "auc",
          )
        
___________________


Chart Customization
-------------------

VerticaPy empowers users with a high degree of flexibility when it comes to tailoring the visual aspects of their plots. 
This customization extends to essential elements such as **color schemes**, **text labels**, and **plot sizes**, as well as a wide range of other attributes that can be fine-tuned to align with specific design preferences and analytical requirements. Whether you want to make your visualizations more visually appealing or need to convey specific insights with precision, VerticaPy's customization options enable you to craft graphics that suit your exact needs.

.. note:: As learning curves are essentially range plots, customization options are identical to those available for :ref:`range`.