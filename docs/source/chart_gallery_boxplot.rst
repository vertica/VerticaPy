.. _chart_gallery.boxplot:


=======
Boxplot
=======

.. Necessary Code Elements

.. ipython:: python
    :suppress:

    import verticapy as vp
    import numpy as np

    N = 100 # Number of Records

    data = vp.vDataFrame({
      "category": [np.random.choice(['A','B','C']) for _ in range(N)],
      "score1": np.random.normal(5, 1, N),
      "score2": np.random.normal(8, 1.5, N),
      "score3": np.random.normal(10, 2, N),
    })


General
-------

Let's begin by importing `VerticaPy`.

.. ipython:: python

    import verticapy as vp

Let's also import `numpy` to create a random dataset.

.. ipython:: python

    import numpy as np

Let's generate a dataset using the following data.

.. code-block:: python

    N = 100
        
    data = vp.vDataFrame({
      "category": [np.random.choice(['A','B','C']) for _ in range(N)],
      "score1": np.random.normal(5, 1, N),
      "score2": np.random.normal(8, 1.5, N),
      "score3": np.random.normal(10, 2, N),
    })

In the context of data visualization, we have the flexibility to harness multiple plotting libraries to craft a wide range of graphical representations. VerticaPy, as a versatile tool, provides support for several graphic libraries, such as Matplotlib, Highcharts, and Plotly. Each of these libraries offers unique features and capabilities, allowing us to choose the most suitable one for our specific data visualization needs.

.. image:: ../../docs/source/_static/plotting_libs.png
   :width: 80%
   :align: center

.. note::
    
    To select the desired plotting library, we simply need to use the `set_option` function. VerticaPy offers the flexibility to smoothly transition between different plotting libraries. In instances where a particular graphic is not supported by the chosen library or is not supported within the VerticaPy framework, the tool will automatically generate a warning and then switch to an alternative library where the graphic can be created.

Please click on the tabs to view the various graphics generated by the different plotting libraries.

.. ipython:: python
    :suppress:

    import verticapy as vp

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    We can switch to using the `plotly` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "plotly")

    In VerticaPy, you can create a single boxplot or multiple boxplots within the same graphic.
    
    .. tab:: Single

      .. tab:: Python  

        .. code-block:: python
          
            data["score1"].boxplot()

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k boxplot
            SELECT score1 FROM :data;

      .. ipython:: python
          :suppress:
        
          fig = data["score1"].boxplot()
          fig.write_html("figures/plotting_plotly_boxplot_single.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_boxplot_single.html

    .. tab:: Multi

      .. tab:: Python

        .. code-block:: python
          
            data.boxplot(columns = ["score1", "score2", "score3"])

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k boxplot
            SELECT score1, score2, score3 FROM :data;

      .. ipython:: python
          :suppress:

          fig = data.boxplot(columns = ["score1", "score2", "score3"])
          fig.write_html("figures/plotting_plotly_boxplot_multi.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_boxplot_multi.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    We can switch to using the `highcharts` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "highcharts")

    In VerticaPy, you can create a single boxplot or multiple boxplots within the same graphic.

    .. tab:: Single

      .. tab:: Python  

        .. code-block:: python
          
            data["score1"].boxplot()

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k boxplot
            SELECT score1 FROM :data;

      .. ipython:: python
          :suppress:

          fig = data["score1"].boxplot()
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_boxplot_single")
          with open("figures/plotting_highcharts_boxplot_single.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_boxplot_single.html

    .. tab:: Multi

      .. tab:: Python

        .. code-block:: python
          
            data.boxplot(columns = ["score1", "score2", "score3"])

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k boxplot
            SELECT score1, score2, score3 FROM :data;

      .. ipython:: python
          :suppress:

          fig = data.boxplot(columns = ["score1", "score2", "score3"])
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_boxplot_multi")
          with open("figures/plotting_highcharts_boxplot_multi.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_boxplot_multi.html
            
.. tab:: Matplotlib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    We can switch to using the `matplotlib` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "matplotlib")

    In VerticaPy, you can create a single boxplot or multiple boxplots within the same graphic.

    .. tab:: Single

      .. tab:: Python

        .. ipython:: python
            :okwarning:

            @savefig plotting_matplotlib_boxplot_single.png
            data["score1"].boxplot()

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k boxplot
            SELECT score1 FROM :data;

        .. image:: ../../docs/source/savefig/plotting_matplotlib_boxplot_single.png
            :width: 100%
            :align: center

    .. tab:: Multi

      .. tab:: Python

        .. ipython:: python
            :okwarning:

            @savefig plotting_matplotlib_boxplot_multi.png
            data.boxplot(columns = ["score1", "score2", "score3"])

      .. tab:: SQL

        We load the VerticaPy `chart` extension.

        .. code-block:: python

            %load_ext verticapy.chart

        We write the SQL query using Jupyter magic cells.

        .. code-block:: sql
            
            %%chart -k boxplot
            SELECT score1, score2, score3 FROM :data;

        .. image:: ../../docs/source/savefig/plotting_matplotlib_boxplot_multi.png
            :width: 100%
            :align: center

_________________

Custom Parameters
-----------------

In VerticaPy, you have a range of options for customizing your boxplots. You can select custom quantiles for both the lower and upper bounds, allowing you to precisely define the range of data displayed in your boxplot. Additionally, you can specify the maximum number of outliers, or "flyers," that you wish to be displayed in your plot, giving you fine-grained control over the visualization of your data.

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Quantiles**

    .. code-block:: python
        
        data["score1"].boxplot(q = (0.1, 0.9))

    .. ipython:: python
        :suppress:

        fig = data["score1"].boxplot(q = (0.1, 0.9))
        fig.write_html("figures/plotting_plotly_boxplot_custom_q.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_boxplot_custom_q.html

    .. note:: By selecting the tuple (0.1, 0.9), we are effectively utilizing the values corresponding to the first and ninth deciles of the data distribution.

    **Fliers**

    .. note:: "Flyers" in this context represents the outliers within the distribution, and the process of selecting them can be time-consuming. If you wish to expedite the computation of your box plot, you can set the "flyers" parameter to 0. This will result in a faster box plot generation without displaying outliers.

    .. code-block:: python
        
        data["score1"].boxplot(q= (0.4, 0.6), max_nb_fliers = 5)

    .. ipython:: python
        :suppress:

        fig = data["score1"].boxplot(q = (0.4, 0.6), max_nb_fliers = 5)
        fig.write_html("figures/plotting_plotly_boxplot_custom_fl.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_boxplot_custom_fl.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Quantiles**

    .. code-block:: python
              
        data["score1"].boxplot(q = (0.1, 0.9))

    .. ipython:: python
        :suppress:

        fig = data["score1"].boxplot(q = (0.1, 0.9))
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_boxplot_custom_q")
        with open("figures/plotting_highcharts_boxplot_custom_q.html", "w") as file:
          file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_boxplot_custom_q.html

    .. note:: By selecting the tuple (0.1, 0.9), we are effectively utilizing the values corresponding to the first and ninth deciles of the data distribution.

    **Fliers**

    .. note:: "Flyers" in this context represents the outliers within the distribution, and the process of selecting them can be time-consuming. If you wish to expedite the computation of your box plot, you can set the "flyers" parameter to 0. This will result in a faster box plot generation without displaying outliers.

    .. code-block:: python
              
        data["score1"].boxplot(q = (0.4, 0.6), max_nb_fliers = 5)

    .. ipython:: python
        :suppress:

        fig = data["score1"].boxplot(q = (0.4, 0.6), max_nb_fliers = 5)
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_boxplot_custom_fl")
        with open("figures/plotting_highcharts_boxplot_custom_fl.html", "w") as file:
          file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_boxplot_custom_fl.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Quantiles**

    .. ipython:: python

        @savefig plotting_matplotlib_boxplot_custom_q.png
        data["score1"].boxplot(q = (0.1, 0.9))

    .. note:: By selecting the tuple (0.1, 0.9), we are effectively utilizing the values corresponding to the first and ninth deciles of the data distribution.

    **Fliers**

    .. note:: "Flyers" in this context represents the outliers within the distribution, and the process of selecting them can be time-consuming. If you wish to expedite the computation of your box plot, you can set the "flyers" parameter to 0. This will result in a faster box plot generation without displaying outliers.

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_boxplot_custom_fl.png
        data["score1"].boxplot(q = (0.4, 0.6), max_nb_fliers = 5)

____________

Grouping
--------

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    Group by categories.

    .. tab:: Python

      .. code-block:: python
        
          data["score1"].boxplot(by = "category")

    .. tab:: SQL

      .. code-block:: sql
            
            %%chart -k boxplot
            SELECT score1, category FROM :data;

    .. ipython:: python
        :suppress:

        fig = data["score1"].boxplot(by = "category")
        fig.write_html("figures/plotting_plotly_boxplot_groupby.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_boxplot_groupby.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    .. tab:: Python

      .. code-block:: python
        
          data["score1"].boxplot(by = "category")

    .. tab:: SQL

      .. code-block:: sql
            
            %%chart -k boxplot
            SELECT score1, category FROM :data;

    .. ipython:: python
        :suppress:

        fig = data["score1"].boxplot(by = "category")
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_boxplot_groupby")
        with open("figures/plotting_highcharts_boxplot_groupby.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_boxplot_groupby.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    .. tab:: Python

      .. ipython:: python
          :okwarning:

          @savefig plotting_matplotlib_boxplot_1D_groupby.png
          data["score1"].boxplot(by = "category")

    .. tab:: SQL

      .. code-block:: sql
            
            %%chart -k boxplot
            SELECT score1, category FROM :data;

      .. image:: ../../docs/source/savefig/plotting_matplotlib_boxplot_1D_groupby.png
            :width: 100%
            :align: center

___________________


Chart Customization
-------------------

VerticaPy empowers users with a high degree of flexibility when it comes to tailoring the visual aspects of their plots. 
This customization extends to essential elements such as **color schemes**, **text labels**, and **plot sizes**, as well as a wide range of other attributes that can be fine-tuned to align with specific design preferences and analytical requirements. Whether you want to make your visualizations more visually appealing or need to convey specific insights with precision, VerticaPy's customization options enable you to craft graphics that suit your exact needs.

.. hint::

    For SQL users who use Jupyter Magic cells, chart customization must be done in Python. They can then export the graphic using the last magic cell result.

    .. code-block:: python

        chart = _

    Now, the chart variable includes the graphic. Depending on the library you are using, you will obtain a different object.

.. Important:: Different customization parameters are available for Plotly, Highcharts, and Matplotlib. 
    For a comprehensive list of customization features, please consult the documentation of the respective 
    libraries: `plotly <https://plotly.com/python-api-reference/>`_, `matplotlib <https://matplotlib.org/stable/api/matplotlib_configuration_api.html>`_ and `highcharts <https://api.highcharts.com/highcharts/>`_.

Colors
~~~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom colors for 1D**

    .. code-block:: python
        
        fig = data["score1"].boxplot()
        fig.update_traces(marker = dict(color="red"))

    .. ipython:: python
        :suppress:

        fig = data["score1"].boxplot()
        fig.update_traces(marker = dict(color = "red"))
        fig.write_html("figures/plotting_plotly_boxplot_custom_color_1.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_boxplot_custom_color_1.html

    **Custom colors mapping for categories**

    .. note:: You can leverage all the capabilities of the Plotly object, including functions like `update_trace`.

    .. code-block:: python
        
        fig = data.boxplot(columns = ["score1", "score2", "score3"])
        new_colors = ["red", "orange","green"]
        for trace_index, new_color in enumerate(new_colors):
            if trace_index < len(fig.data):
                fig.data[trace_index].marker.color = new_color

    .. ipython:: python
        :suppress:

        fig = data.boxplot(columns = ["score1", "score2", "score3"])
        new_colors = ["red", "orange","green"]
        for trace_index, new_color in enumerate(new_colors):
            if trace_index < len(fig.data):
                fig.data[trace_index].marker.color = new_color                                           
        fig.write_html("figures/plotting_plotly_boxplot_custom_color_2.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_boxplot_custom_color_2.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom colors for 1D**

    .. code-block:: python
        
        data["score1"].boxplot(colors = ["green"])

    .. ipython:: python
        :suppress:

        fig = data["score1"].boxplot(colors = ["green"])
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_boxplot_custom_color_1")
        with open("figures/plotting_highcharts_boxplot_custom_color_1.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_boxplot_custom_color_1.html

    **Custom colors mapping for categories**

    .. code-block:: python
        
        data.boxplot(columns = ["score1", "score2", "score3"], colors = ["red", "orange", "green"])

    .. ipython:: python
        :suppress:

        fig = data.boxplot(columns = ["score1", "score2", "score3"], colors = ["red", "orange", "green"])
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_boxplot_custom_color_2")
        with open("figures/plotting_highcharts_boxplot_custom_color_2.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_boxplot_custom_color_2.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom colors for 1D**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_boxplot_custom_color_1.png
        data["score1"].boxplot(colors = ["red"])

    **Custom colors mapping for categories**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_boxplot_custom_color_2.png
        data.boxplot(columns = ["score1", "score2", "score3"], color = ["red", "orange", "green"])

____________

Size
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    Custom Width and Height.

    .. code-block:: python
        
        data.boxplot(columns = ["score1", "score2", "score3"], width = 300, height = 300)

    .. ipython:: python
        :suppress:

        fig = data.boxplot(columns = ["score1", "score2", "score3"], width = 300, height = 300)
        fig.write_html("figures/plotting_plotly_boxplot_custom_size.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_boxplot_custom_size.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    Custom Width and Height.

    .. code-block:: python
        
        data["grade"].boxplot(width = 500, height = 200)

    .. ipython:: python
        :suppress:

        fig = data["score1"].boxplot(width = 500, height = 200)
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_boxplot_custom_size")
        with open("figures/plotting_highcharts_boxplot_custom_size.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_boxplot_custom_size.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    Custom Width and Height.

    .. ipython:: python

        @savefig plotting_matplotlib_boxplot_1D_custom_size.png
        data["score1"].boxplot(width = 6, height = 3)

____________


Text
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom Title**

    .. code-block:: python
        
        data["score1"].boxplot().update_layout(title_text = "Custom Title")

    .. ipython:: python
        :suppress:

        fig = data["score1"].boxplot().update_layout(title_text = "Custom Title")
        fig.write_html("figures/plotting_plotly_boxplot_custom_main_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_boxplot_custom_main_title.html


    **Custom Axis Titles**

    .. code-block:: python
        
        data.boxplot(columns = ["score1", "score2", "score3"], yaxis_title = "Custom Y-Axis Title")

    .. ipython:: python
        :suppress:

        fig = data.boxplot(columns = ["score1", "score2", "score3"], yaxis_title = "Custom Y-Axis Title")
        fig.write_html("figures/plotting_plotly_boxplot_custom_y_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_boxplot_custom_y_title.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom Title Text**

    .. code-block:: python
        
        data["score1"].boxplot(title = {"text": "Custom Title"})

    .. ipython:: python
        :suppress:

        fig = data["score1"].boxplot(title = {"text": "Custom Title"})
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_boxplot_custom_text_title")
        with open("figures/plotting_highcharts_boxplot_custom_text_title.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_boxplot_custom_text_title.html

    **Custom Axis Titles**

    .. code-block:: python
        
        data["score1"].boxplot(xAxis = {"title": {"text": "Custom X-Axis Title"}})

    .. ipython:: python
        :suppress:

        fig = data["score1"].boxplot(xAxis = {"title": {"text": "Custom X-Axis Title"}})
        html_text = fig.htmlcontent.replace("container","plotting_highcharts_boxplot_custom_text_xtitle")
        with open("figures/plotting_highcharts_boxplot_custom_text_xtitle.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_boxplot_custom_text_xtitle.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom Title Text**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_boxplot_custom_title_label.png
        data["score1"].boxplot().set_title("Custom Title")

    **Custom Axis Titles**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_boxplot_custom_yaxis_label.png
        data["score1"].boxplot().set_ylabel("Custom Y Axis")

____________

