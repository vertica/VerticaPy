.. _chart_gallery.line:


==========
Line Plots
==========

.. Necessary Code Elements

.. ipython:: python
    :suppress:

    import verticapy as vp

    data = vp.vDataFrame({
        "date": [1900, 1950, 2000],
        "Asia": [947, 1402, 3634],
        "Africa": [133, 221, 767],
        "Europe": [408, 547, 729], 
        "America": [156, 339, 818],
        "Oceania": [6, 13, 30],
    })


General
-------

Let's begin by importing `VerticaPy`.

.. ipython:: python

    import verticapy as vp

Let's generate a dataset using the following data.

.. code-block:: python
        
    data = vp.vDataFrame({
        "date": [1900, 1950, 2000],
        "Asia": [947, 1402, 3634],
        "Africa": [133, 221, 767],
        "Europe": [408, 547, 729], 
        "America": [156, 339, 818],
        "Oceania": [6, 13, 30],
    })

In the context of data visualization, we have the flexibility to harness multiple plotting libraries to craft a wide range of graphical representations. VerticaPy, as a versatile tool, provides support for several graphic libraries, such as Matplotlib, Highcharts, and Plotly. Each of these libraries offers unique features and capabilities, allowing us to choose the most suitable one for our specific data visualization needs.

.. image:: ../../docs/source/_static/plotting_libs.png
   :width: 80%
   :align: center

.. note::
    
    To select the desired plotting library, we simply need to use the `set_option` function. VerticaPy offers the flexibility to smoothly transition between different plotting libraries. In instances where a particular graphic is not supported by the chosen library or is not supported within the VerticaPy framework, the tool will automatically generate a warning and then switch to an alternative library where the graphic can be created.

Please click on the tabs to view the various graphics generated by the different plotting libraries.

.. ipython:: python
    :suppress:

    import verticapy as vp

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    We can switch to using the `plotly` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "plotly")

    In VerticaPy, creating one or multiple line charts within a single graphic is a straightforward and flexible process. This feature enables you to efficiently visualize and compare multiple datasets or trends, providing you with a powerful tool for gaining insights from your data.
    
    .. tab:: Single

      .. code-block:: python
          
          data["Asia"].plot(ts = "date")

      .. ipython:: python
          :suppress:
        
          fig = data["Asia"].plot(ts = "date")
          fig.write_html("figures/plotting_plotly_line_single.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_line_single.html


      **Drawing a Spline plot**

      .. code-block:: python
          
          data["Asia"].plot(ts = "date", kind = "spline")

      .. ipython:: python
          :suppress:
        
          fig = data["Asia"].plot(ts = "date", kind = "spline")
          fig.write_html("figures/plotting_plotly_line_single_spline.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_line_single_spline.html


      **Drawing a step plot**


      .. code-block:: python
          
          data["Asia"].plot(ts = "date", kind = "step")

      .. ipython:: python
          :suppress:
        
          fig = data["Asia"].plot(ts = "date", kind = "step")
          fig.write_html("figures/plotting_plotly_line_single_step.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_line_single_step.html


    .. tab:: Multi

      .. code-block:: python
          
          data.plot(columns = ["Asia", "Africa", "Europe", "America", "Oceania"], ts = "date")

      .. ipython:: python
          :suppress:

          fig = data.plot(columns = ["Asia", "Africa", "Europe", "America", "Oceania"], ts = "date")
          fig.write_html("figures/plotting_plotly_line_multi.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_line_multi.html

      **Drawing a Spline plot**

      .. code-block:: python
          
          data.plot(columns = ["Asia", "Africa", "Europe", "America", "Oceania"], ts = "date", kind = "spline")

      .. ipython:: python
          :suppress:
        
          fig = data.plot(columns = ["Asia", "Africa", "Europe", "America", "Oceania"], ts = "date", kind = "spline")
          fig.write_html("figures/plotting_plotly_line_multi_spline.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_line_multi_spline.html


      **Drawing a step plot**


      .. code-block:: python
          
          data.plot(columns = ["Asia", "Africa", "Europe", "America", "Oceania"], ts = "date", kind = "step")

      .. ipython:: python
          :suppress:
        
          fig = data.plot(columns = ["Asia", "Africa", "Europe", "America", "Oceania"], ts = "date", kind = "step")
          fig.write_html("figures/plotting_plotly_line_multi_step.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_line_multi_step.html


      .. hint::

          You can achieve the same graphic in VerticaPy by employing the "GROUP BY" functionality, made possible through the "by" parameter. Consider a dataset comprising three columns: a timestamp, a categorical column, and a value. Utilizing the "by" parameter in conjunction with this dataset allows for efficient grouping and visualization. This capability enables you to effectively analyze and present data trends over time, across categories, or based on specific values within a single graph, enhancing your ability to extract meaningful insights from your data.

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    We can switch to using the `highcharts` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "highcharts")

    In VerticaPy, creating one or multiple line charts within a single graphic is a straightforward and flexible process. This feature enables you to efficiently visualize and compare multiple datasets or trends, providing you with a powerful tool for gaining insights from your data.

    .. tab:: Single

      .. code-block:: python
          
          data["Asia"].plot(ts = "date")

      .. ipython:: python
          :suppress:

          fig = data["Asia"].plot(ts = "date")
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_line_single")
          with open("figures/plotting_highcharts_line_single.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_line_single.html

      **Drawing a Spline plot**

      .. code-block:: python
          
          data["Asia"].plot(ts = "date", kind = "spline")

      .. ipython:: python
          :suppress:

          fig = data["Asia"].plot(ts = "date", kind = "spline")
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_line_single_spline")
          with open("figures/plotting_highcharts_line_single_spline.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_line_single_spline.html

      **Drawing a step plot**


      .. code-block:: python
          
          data["Asia"].plot(ts = "date", kind = "step")

      .. ipython:: python
          :suppress:

          fig = data["Asia"].plot(ts = "date", kind = "step")
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_line_single_step")
          with open("figures/plotting_highcharts_line_single_step.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_line_single_step.html

    .. tab:: Multi

      .. code-block:: python
          
          data.plot(columns = ["Asia", "Africa", "Europe", "America", "Oceania"], ts = "date")

      .. ipython:: python
          :suppress:

          fig = data.plot(columns = ["Asia", "Africa", "Europe", "America", "Oceania"], ts = "date")
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_line_multi")
          with open("figures/plotting_highcharts_line_multi.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_line_multi.html

      **Drawing a Spline plot**

      .. code-block:: python
          
          data.plot(columns = ["Asia", "Africa", "Europe", "America", "Oceania"], ts = "date", kind = "spline)

      .. ipython:: python
          :suppress:

          fig = data.plot(columns = ["Asia", "Africa", "Europe", "America", "Oceania"], ts = "date", kind = "spline")
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_line_multi_spline")
          with open("figures/plotting_highcharts_line_multi_spline.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_line_multi_spline.html


      **Drawing a step plot**


      .. code-block:: python
          
          data.plot(columns = ["Asia", "Africa", "Europe", "America", "Oceania"], ts = "date", kind = "step)

      .. ipython:: python
          :suppress:

          fig = data.plot(columns = ["Asia", "Africa", "Europe", "America", "Oceania"], ts = "date", kind = "step")
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_line_multi_step")
          with open("figures/plotting_highcharts_line_multi_step.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_line_multi_step.html


      .. hint::

          You can achieve the same graphic in VerticaPy by employing the "GROUP BY" functionality, made possible through the "by" parameter. Consider a dataset comprising three columns: a timestamp, a categorical column, and a value. Utilizing the "by" parameter in conjunction with this dataset allows for efficient grouping and visualization. This capability enables you to effectively analyze and present data trends over time, across categories, or based on specific values within a single graph, enhancing your ability to extract meaningful insights from your data.
        
.. tab:: Matplotlib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    We can switch to using the `matplotlib` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "matplotlib")

    In VerticaPy, creating one or multiple line charts within a single graphic is a straightforward and flexible process. This feature enables you to efficiently visualize and compare multiple datasets or trends, providing you with a powerful tool for gaining insights from your data.

    .. tab:: Single

      .. ipython:: python
          :okwarning:

          @savefig plotting_matplotlib_line_single.png
          data["Asia"].plot(ts = "date")

      **Drawing a step plot**

      .. ipython:: python
          :okwarning:

          @savefig plotting_matplotlib_line_single_step.png
          data["Asia"].plot(ts = "date", kind = "step")

    .. tab:: Multi

      .. ipython:: python
          :okwarning:

          @savefig plotting_matplotlib_line_multi.png
          data.plot(columns = ["Asia", "Africa", "Europe", "America", "Oceania"], ts = "date")

      **Drawing a step plot**

      .. ipython:: python
          :okwarning:

          @savefig plotting_matplotlib_line_multi_step.png
          data.plot(columns = ["Asia", "Africa", "Europe", "America", "Oceania"], ts = "date", kind = "step")

      .. hint::

          You can achieve the same graphic in VerticaPy by employing the "GROUP BY" functionality, made possible through the "by" parameter. Consider a dataset comprising three columns: a timestamp, a categorical column, and a value. Utilizing the "by" parameter in conjunction with this dataset allows for efficient grouping and visualization. This capability enables you to effectively analyze and present data trends over time, across categories, or based on specific values within a single graph, enhancing your ability to extract meaningful insights from your data.
        
___________________


Chart Customization
-------------------

VerticaPy empowers users with a high degree of flexibility when it comes to tailoring the visual aspects of their plots. 
This customization extends to essential elements such as **color schemes**, **text labels**, and **plot sizes**, as well as a wide range of other attributes that can be fine-tuned to align with specific design preferences and analytical requirements. Whether you want to make your visualizations more visually appealing or need to convey specific insights with precision, VerticaPy's customization options enable you to craft graphics that suit your exact needs.

.. Important:: Different customization parameters are available for Plotly, Highcharts, and Matplotlib. 
    For a comprehensive list of customization features, please consult the documentation of the respective 
    libraries: `plotly <https://plotly.com/python-api-reference/>`_, `matplotlib <https://matplotlib.org/stable/api/matplotlib_configuration_api.html>`_ and `highcharts <https://api.highcharts.com/highcharts/>`_.

Colors
~~~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom colors**

    .. code-block:: python
        
        fig = data["Asia"].plot(ts = "date")
        fig.update_traces(marker = dict(color="red"))

    .. ipython:: python
        :suppress:

        fig = data["Asia"].plot(ts = "date", colors = "red")
        fig.write_html("figures/plotting_plotly_line_custom_color_1.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_line_custom_color_1.html

    **Custom colors mapping for categories**

    .. note:: You can leverage all the capabilities of the Plotly object, including functions like `update_trace`.

    .. code-block:: python
        
        fig = data.plot(columns = ["Asia", "Africa", "Europe"], ts = "date", colors = ["red", "orange","green"])

    .. ipython:: python
        :suppress:

        fig = data.plot(columns = ["Asia", "Africa", "Europe"], ts = "date", colors = ["red", "orange","green"])                                      
        fig.write_html("figures/plotting_plotly_line_custom_color_2.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_line_custom_color_2.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom colors**

    .. code-block:: python
        
        data["Asia"].plot(ts = "date", colors = ["green"])

    .. ipython:: python
        :suppress:

        fig = data["Asia"].plot(ts = "date", colors = ["green"])
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_line_custom_color_1")
        with open("figures/plotting_highcharts_line_custom_color_1.html", "w") as file:
            file.write(html_text)


    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_line_custom_color_1.html

    **Custom colors mapping for categories**

    .. code-block:: python
        
        data.plot(columns = ["Asia", "Africa", "Europe"], ts = "date", colors = ["red", "orange", "green"])

    .. ipython:: python
        :suppress:

        fig = data.plot(columns = ["Asia", "Africa", "Europe"], ts = "date", colors = ["red", "orange", "green"])
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_line_custom_color_2")
        with open("figures/plotting_highcharts_line_custom_color_2.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_line_custom_color_2.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom colors**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_line_custom_color_1.png
        data["Asia"].plot(ts = "date", colors = ["red"])

    **Custom colors mapping for categories**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_line_custom_color_2.png
        data.plot(columns = ["Asia", "Africa", "Europe"], ts = "date", colors = ["red", "orange", "green"])

____

Size
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    Custom Width and Height.

    .. code-block:: python
        
        data["Asia"].plot(ts = "date", width = 300, height = 300)

    .. ipython:: python
        :suppress:

        fig = data["Asia"].plot(ts = "date", width = 300, height = 300)
        fig.write_html("figures/plotting_plotly_line_custom_size.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_line_custom_size.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    Custom Width and Height.

    .. code-block:: python
        
        data["Asia"].plot(ts = "date", width = 500, height = 200)

    .. ipython:: python
        :suppress:

        fig = data["Asia"].plot(ts = "date", width = 500, height = 200)
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_line_custom_size")
        with open("figures/plotting_highcharts_line_custom_size.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_line_custom_size.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    Custom Width and Height.

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_line_single_custom_size.png
        data["Asia"].plot(ts = "date", width = 6, height = 3)

_____


Text
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom Title**

    .. code-block:: python
        
        data["Asia"].plot(ts = "date").update_layout(title_text = "Custom Title")

    .. ipython:: python
        :suppress:

        fig = data["Asia"].plot(ts = "date").update_layout(title_text = "Custom Title")
        fig.write_html("figures/plotting_plotly_line_custom_main_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_line_custom_main_title.html


    **Custom Axis Titles**

    .. code-block:: python
        
        data["Asia"].plot(ts = "date", yaxis_title = "Custom Y-Axis Title")

    .. ipython:: python
        :suppress:

        fig = data["Asia"].plot(ts = "date", yaxis_title = "Custom Y-Axis Title")
        fig.write_html("figures/plotting_plotly_line_custom_y_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_line_custom_y_title.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom Title Text**

    .. code-block:: python
        
        data["Asia"].plot(ts = "date", title = {"text": "Custom Title"})

    .. ipython:: python
        :suppress:

        fig = data["Asia"].plot(ts = "date", title = {"text": "Custom Title"})
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_line_custom_text_title")
        with open("figures/plotting_highcharts_line_custom_text_title.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_line_custom_text_title.html

    **Custom Axis Titles**

    .. code-block:: python
        
        data["Asia"].plot(ts = "date", xAxis = {"title": {"text": "Custom X-Axis Title"}})

    .. ipython:: python
        :suppress:

        fig = data["Asia"].plot(ts = "date", xAxis = {"title": {"text": "Custom X-Axis Title"}})
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_line_custom_text_xtitle")
        with open("figures/plotting_highcharts_line_custom_text_xtitle.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_line_custom_text_xtitle.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom Title Text**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_line_custom_title_label.png
        data["Asia"].plot(ts = "date").set_title("Custom Title")

    **Custom Axis Titles**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_line_custom_yaxis_label.png
        data["Asia"].plot(ts = "date").set_ylabel("Custom Y Axis")

_____

