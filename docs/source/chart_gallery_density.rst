.. _chart_gallery.density:

=======
Density
=======

.. Necessary Code Elements

.. ipython:: python
    :suppress:

    import verticapy as vp
    import numpy as np

    N = 100

    data = vp.vDataFrame({
      "category": [np.random.choice(['A','B','C']) for _ in range(N)],
      "score1": np.random.normal(5, 1, N),
      "score2": np.random.normal(8, 1.5, N),
      "score3": np.random.normal(10, 2, N),
    })


General
-------

Let's begin by importing `VerticaPy`.

.. ipython:: python

    import verticapy as vp

Let's also import `numpy` to create a random dataset.

.. ipython:: python

    import numpy as np

Let's generate a dataset using the following data.

.. code-block:: python
        
    N = 100
    data = vp.vDataFrame({
      "category": [np.random.choice(['A','B','C']) for _ in range(N)],
      "score1": np.random.normal(5, 1, N),
      "score2": np.random.normal(8, 1.5, N),
      "score3": np.random.normal(10, 2, N),
    })

In the context of data visualization, we have the flexibility to harness multiple plotting libraries to craft a wide range of graphical representations. VerticaPy, as a versatile tool, provides support for several graphic libraries, such as Matplotlib, Highcharts, and Plotly. Each of these libraries offers unique features and capabilities, allowing us to choose the most suitable one for our specific data visualization needs.

.. image:: ../../docs/source/_static/plotting_libs.png
   :width: 80%
   :align: center

.. note::
    
    To select the desired plotting library, we simply need to use the `set_option` function. VerticaPy offers the flexibility to smoothly transition between different plotting libraries. In instances where a particular graphic is not supported by the chosen library or is not supported within the VerticaPy framework, the tool will automatically generate a warning and then switch to an alternative library where the graphic can be created.

Please click on the tabs to view the various graphics generated by the different plotting libraries.

.. ipython:: python
    :suppress:

    import verticapy as vp

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    We can switch to using the `plotly` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "plotly")

    In VerticaPy, you have the flexibility to generate either a single density plot or multiple density plots within a single graphical representation.
    
    .. tab:: Single

      .. code-block:: python
          
          data["score1"].density()

      .. ipython:: python
          :suppress:
        
          fig = data["score1"].density(width = 600)
          fig.write_html("figures/plotting_plotly_density_single.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_density_single.html

    .. tab:: Multi

      .. code-block:: python
          
          data.density(columns = ["score1", "score2", "score3"])

      .. ipython:: python
          :suppress:

          fig = data.density(columns = ["score1", "score2", "score3"], width = 600)
          fig.write_html("figures/plotting_plotly_density_multi.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_density_multi.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    We can switch to using the `highcharts` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "highcharts")

    In VerticaPy, you have the flexibility to generate either a single density plot or multiple density plots within a single graphical representation.

    .. tab:: Single

      .. code-block:: python
          
          data["score1"].density()

      .. ipython:: python
          :suppress:

          fig = data["score1"].density()
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_density_single")
          with open("figures/plotting_highcharts_density_single.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_density_single.html

    .. tab:: Multi

      .. code-block:: python
          
          data.density(columns = ["score1", "score2", "score3"])

      .. ipython:: python
          :suppress:

          fig = data.density(columns = ["score1", "score2", "score3"])
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_density_multi")
          with open("figures/plotting_highcharts_density_multi.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_density_multi.html
            
.. tab:: Matplotlib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    We can switch to using the `matplotlib` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "matplotlib")

    In VerticaPy, you have the flexibility to generate either a single density plot or multiple density plots within a single graphical representation.

    .. tab:: Single

      .. ipython:: python
          :okwarning:

          @savefig plotting_matplotlib_density_single.png
          data["score1"].density()

    .. tab:: Multi

      .. ipython:: python
          :okwarning:

          @savefig plotting_matplotlib_density_multi.png
          data.density(columns = ["score1", "score2", "score3"])

___________________

Custom Parameters
-------------------

In VerticaPy, there are various customization options available for tailoring your density plots to your specific needs. You can customize the bandwidth to control the smoothness of the plot, allowing you to emphasize or reduce the level of detail. Additionally, you have the choice to select the kernel from a range of options, providing flexibility in how the density is estimated and displayed.

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Bandwidth**

    .. code-block:: python
        
        data["score1"].density(bandwidth = 0.4)

    .. ipython:: python
        :suppress:

        fig = data["score1"].density(bandwidth = 0.4, width = 600)
        fig.write_html("figures/plotting_plotly_density_custom_bandwidth.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_density_custom_bandwidth.html

    .. note:: You can adjust the bandwidth in VerticaPy to fine-tune the level of smoothness or granularity in your density plots, allowing you to precisely control the appearance of your visualizations.

    **Kernel**

    .. note:: In VerticaPy, you have the flexibility to choose from various kernel options when creating density plots. This choice of kernel allows you to tailor the density estimation method to best represent your data distribution, ensuring your visualizations accurately capture the underlying patterns in your data.

    .. code-block:: python
        
        data["score1"].density(kernel='logistic')

    .. ipython:: python
        :suppress:

        fig = data["score1"].density(kernel='logistic', width = 600)
        fig.write_html("figures/plotting_plotly_density_custom_kernel.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_density_custom_kernel.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Bandwidth**

    .. code-block:: python
              
        data["score1"].density(bandwidth=0.4)

    .. ipython:: python
        :suppress:

        fig = data["score1"].density(bandwidth=0.4)
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_density_custom_bandwidth")
        with open("figures/plotting_highcharts_density_custom_bandwidth.html", "w") as file:
          file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_density_custom_bandwidth.html

    .. note:: You can adjust the bandwidth in VerticaPy to fine-tune the level of smoothness or granularity in your density plots, allowing you to precisely control the appearance of your visualizations.

    **Kernel**

    .. note:: In VerticaPy, you have the flexibility to choose from various kernel options when creating density plots. This choice of kernel allows you to tailor the density estimation method to best represent your data distribution, ensuring your visualizations accurately capture the underlying patterns in your data.

    .. code-block:: python
              
        data["score1"].density(kernel='logistic')

    .. ipython:: python
        :suppress:

        fig = data["score1"].density(kernel='logistic')
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_density_custom_kernel")
        with open("figures/plotting_highcharts_density_custom_kernel.html", "w") as file:
          file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_density_custom_kernel.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Bandwidth**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_density_custom_bandwidth.png
        data["score1"].density(bandwidth=0.4)

    .. note:: You can adjust the bandwidth in VerticaPy to fine-tune the level of smoothness or granularity in your density plots, allowing you to precisely control the appearance of your visualizations.

    **Kernel**

    .. note:: In VerticaPy, you have the flexibility to choose from various kernel options when creating density plots. This choice of kernel allows you to tailor the density estimation method to best represent your data distribution, ensuring your visualizations accurately capture the underlying patterns in your data.

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_density_custom_kernel.png
        data["score1"].density(kernel='logistic')



________

Grouping
--------


.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    Group by categories.

    .. code-block:: python
        
        data["score1"].density(by = "category")

    .. ipython:: python
        :suppress:

        fig = data["score1"].density(by = "category", width = 600)
        fig.write_html("figures/plotting_plotly_density_groupby.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_density_groupby.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    Group by categories.

    .. code-block:: python
        
        data["score1"].density(by = "category")

    .. ipython:: python
        :suppress:

        fig = data["score1"].density(by = "category")
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_density_groupby")
        with open("figures/plotting_highcharts_density_groupby.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_density_groupby.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    Group by categories.

    .. ipython:: python

        @savefig plotting_matplotlib_density_1D_groupby.png
        data["score1"].density(by = "category")

___________________


Chart Customization
-------------------

VerticaPy empowers users with a high degree of flexibility when it comes to tailoring the visual aspects of their plots. 
This customization extends to essential elements such as **color schemes**, **text labels**, and **plot sizes**, as well as a wide range of other attributes that can be fine-tuned to align with specific design preferences and analytical requirements. Whether you want to make your visualizations more visually appealing or need to convey specific insights with precision, VerticaPy's customization options enable you to craft graphics that suit your exact needs.

.. Important:: Different customization parameters are available for Plotly, Highcharts, and Matplotlib. 
    For a comprehensive list of customization features, please consult the documentation of the respective 
    libraries: `plotly <https://plotly.com/python-api-reference/>`_, `matplotlib <https://matplotlib.org/stable/api/matplotlib_configuration_api.html>`_ and `highcharts <https://api.highcharts.com/highcharts/>`_.

Colors
~~~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom colors for 1D**

    .. code-block:: python
        
        fig = data["score1"].density()
        fig.update_traces(marker = dict(color="red"))

    .. ipython:: python
        :suppress:

        fig = data["score1"].density(width = 600)
        fig.update_traces(marker = dict(color = "red"))
        fig.write_html("figures/plotting_plotly_density_custom_color_1.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_density_custom_color_1.html

    **Custom colors mapping for categories**

    .. note:: You can leverage all the capabilities of the Plotly object, including functions like `update_trace`.

    .. code-block:: python
        
        fig = data.density(columns = ["score1", "score2", "score3"])
        new_colors = ["red", "orange","green"]
        for trace_index, new_color in enumerate(new_colors):
            if trace_index < len(fig.data):
                fig.data[trace_index].marker.color = new_color

    .. ipython:: python
        :suppress:

        fig = data.density(columns = ["score1", "score2", "score3"])
        new_colors = ["red", "orange","green"]
        for trace_index, new_color in enumerate(new_colors):
            if trace_index < len(fig.data):
                fig.data[trace_index].marker.color = new_color                                           
        fig.write_html("figures/plotting_plotly_density_custom_color_2.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_density_custom_color_2.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom colors for 1D**

    .. code-block:: python
        
        data["score1"].density(colors = ["green"])

    .. ipython:: python
        :suppress:

        fig = data["score1"].density(colors = ["green"])
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_density_custom_color_1")
        with open("figures/plotting_highcharts_density_custom_color_1.html", "w") as file:
            file.write(html_text)


    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_density_custom_color_1.html

    **Custom colors mapping for categories**

    .. code-block:: python
        
        data.density(columns = ["score1", "score2", "score3"], colors = ["red", "orange", "green"])

    .. ipython:: python
        :suppress:

        fig = data.density(columns = ["score1", "score2", "score3"], colors = ["red", "orange", "green"])
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_density_custom_color_2")
        with open("figures/plotting_highcharts_density_custom_color_2.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_density_custom_color_2.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom colors for 1D**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_density_custom_color_1.png
        data["score1"].density(color = ["red"])

    **Custom colors mapping for categories**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_density_custom_color_2.png
        data.density(columns = ["score1", "score2", "score3"], color = ["red", "orange", "green"])

____

Size
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    Custom Width and Height.

    .. code-block:: python
        
        data.density(columns = ["score1", "score2", "score3"], width = 300, height = 300)

    .. ipython:: python
        :suppress:

        fig = data.density(columns = ["score1", "score2", "score3"], width = 300, height = 300)
        fig.write_html("figures/plotting_plotly_density_custom_size.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_density_custom_size.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    Custom Width and Height.

    .. code-block:: python
        
        data["grade"].density(width = 500, height = 200)

    .. ipython:: python
        :suppress:

        fig = data["score1"].density(width = 500, height = 200)
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_density_custom_size")
        with open("figures/plotting_highcharts_density_custom_size.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_density_custom_size.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    Custom Width and Height.

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_density_1D_custom_size.png
        data["score1"].density(width = 6, height = 3)

____________


Text
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom Title**

    .. code-block:: python
        
        data["score1"].density(title_text = "Custom Title")

    .. ipython:: python
        :suppress:

        fig = data["score1"].density(title_text = "Custom Title", width = 600)
        fig.write_html("figures/plotting_plotly_density_custom_main_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_density_custom_main_title.html

    **Custom Legend Title Text**

    .. code-block:: python
        
        data.density(columns = ["score1", "score2", "score3"], legend_title_text = "Custom Legend")

    .. ipython:: python
        :suppress:

        fig = data.density(columns = ["score1", "score2", "score3"], legend_title_text = "Custom Legend", width = 600)
        fig.write_html("figures/plotting_plotly_density_custom_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_density_custom_title.html

    **Custom Axis Titles**

    .. code-block:: python
        
        data.density(columns = ["score1", "score2", "score3"], yaxis_title = "Custom Y-Axis Title")

    .. ipython:: python
        :suppress:

        fig = data.density(columns = ["score1", "score2", "score3"], yaxis_title = "Custom Y-Axis Title", width = 600)
        fig.write_html("figures/plotting_plotly_density_custom_y_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_density_custom_y_title.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom Title Text**

    .. code-block:: python
        
        data["score1"].density(title = {"text": "Custom Title"})

    .. ipython:: python
        :suppress:

        fig = data["score1"].density(title = {"text": "Custom Title"})
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_density_custom_text_title")
        with open("figures/plotting_highcharts_density_custom_text_title.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_density_custom_text_title.html

    **Custom Axis Titles**

    .. code-block:: python
        
        data["score1"].density(xAxis = {"title": {"text": "Custom X-Axis Title"}})

    .. ipython:: python
        :suppress:

        fig = data["score1"].density(xAxis = {"title": {"text": "Custom X-Axis Title"}})
        html_text = fig.htmlcontent.replace("container","plotting_highcharts_density_custom_text_xtitle")
        with open("figures/plotting_highcharts_density_custom_text_xtitle.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_density_custom_text_xtitle.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom Title Text**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_density_custom_title_label.png
        data["score1"].density().set_title("Custom Title")

    **Custom Axis Titles**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_density_custom_yaxis_label.png
        data["score1"].density().set_ylabel("Custom Y Axis")

_____

