.. _chart_gallery.contour:

============
Contour Plot
============

.. Necessary Code Elements

.. ipython:: python
    :suppress:

    import verticapy as vp

    N = 100 # Number of records

    def f(x, y):
        return x ** 2 - y + 1

    data = vp.vDataFrame({
        "x": np.random.normal(5, 1, N),
        "y": np.random.normal(8, 1.5, N),
    })


General
-------

Let's begin by importing `VerticaPy`.

.. ipython:: python

    import verticapy as vp

Let's also import `numpy` to create a random dataset.

.. ipython:: python

    import numpy as np

Let's generate a dataset using the following data.

.. code-block:: python
        
    N = 100 # Number of records

    data = vp.vDataFrame({
        "x": np.random.normal(5, 1, N),
        "y": np.random.normal(8, 1.5, N),
    })

Let's define the function that we will utilize to create the contour plot. This function will play a crucial role in generating the color map.

.. code-block:: python

    def f(x, y):
        return x ** 2 - y + 1

In the context of data visualization, we have the flexibility to harness multiple plotting libraries to craft a wide range of graphical representations. VerticaPy, as a versatile tool, provides support for several graphic libraries, such as Matplotlib, Highcharts, and Plotly. Each of these libraries offers unique features and capabilities, allowing us to choose the most suitable one for our specific data visualization needs.

.. image:: ../../docs/source/_static/plotting_libs.png
   :width: 80%
   :align: center

.. note::
    
    To select the desired plotting library, we simply need to use the `set_option` function. VerticaPy offers the flexibility to smoothly transition between different plotting libraries. In instances where a particular graphic is not supported by the chosen library or is not supported within the VerticaPy framework, the tool will automatically generate a warning and then switch to an alternative library where the graphic can be created.

Please click on the tabs to view the various graphics generated by the different plotting libraries.

.. ipython:: python
    :suppress:

    import verticapy as vp

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    We can switch to using the `plotly` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "plotly")

    VerticaPy's contour plot feature offers a concise and insightful visualization of the relationships between two continuous variables on the X and Y axes and a function of these two variables. This relationship is vividly portrayed through contour lines or color gradients, simplifying the exploration of complex datasets and enhancing data analysis capabilities.

    .. code-block:: python
          
        data.contour(columns = ["x", "y"], func = f)

    .. ipython:: python
        :suppress:
        
        fig = data.contour(columns = ["x", "y"], func = f)
        fig.write_html("figures/plotting_plotly_contour.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_contour.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    We can switch to using the `highcharts` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "highcharts")

    VerticaPy's contour plot feature offers a concise and insightful visualization of the relationships between two continuous variables on the X and Y axes and a function of these two variables. This relationship is vividly portrayed through contour lines or color gradients, simplifying the exploration of complex datasets and enhancing data analysis capabilities.

    .. code-block:: python
          
        data.contour(columns = ["x", "y"], func = f)

    .. ipython:: python
        :suppress:

        fig = data.contour(columns = ["x", "y"], func = f)
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_contour")
        with open("figures/plotting_highcharts_contour.html", "w") as file:
          file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_contour.html
        
.. tab:: Matplotlib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    We can switch to using the `matplotlib` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "matplotlib")

    VerticaPy's contour plot feature offers a concise and insightful visualization of the relationships between two continuous variables on the X and Y axes and a function of these two variables. This relationship is vividly portrayed through contour lines or color gradients, simplifying the exploration of complex datasets and enhancing data analysis capabilities.

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_contour.png
        data.contour(columns = ["x", "y"], func = f)

.. note::

    Machine learning models, particularly regression and classification models with two predictors, can benefit from their own contour plot. This visual representation aids in exploring predictions and gaining a deeper understanding of how these models perform in different scenarios.

___________________


Chart Customization
-------------------

VerticaPy empowers users with a high degree of flexibility when it comes to tailoring the visual aspects of their plots. 
This customization extends to essential elements such as **color schemes**, **text labels**, and **plot sizes**, as well as a wide range of other attributes that can be fine-tuned to align with specific design preferences and analytical requirements. Whether you want to make your visualizations more visually appealing or need to convey specific insights with precision, VerticaPy's customization options enable you to craft graphics that suit your exact needs.

.. Important:: Different customization parameters are available for Plotly, Highcharts, and Matplotlib. 
    For a comprehensive list of customization features, please consult the documentation of the respective 
    libraries: `plotly <https://plotly.com/python-api-reference/>`_, `matplotlib <https://matplotlib.org/stable/api/matplotlib_configuration_api.html>`_ and `highcharts <https://api.highcharts.com/highcharts/>`_.

Colors
~~~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom CMAP**

    .. code-block:: python
        
        data.contour(columns = ["x", "y"], func = f, colorscale = [[0, "white"], [1, "red"]])

    .. ipython:: python
        :suppress:

        fig = data.contour(columns = ["x", "y"], func = f, colorscale = [[0, "white"], [1, "red"]], width = 650)
        fig.write_html("figures/plotting_plotly_contour_custom_color_1.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_contour_custom_color_1.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom CMAP**

    .. code-block:: python
        
        fig = data.contour(columns = ["x", "y"], func = f)
        fig.set_options(
            "colorAxis",
            {
                "stops": [
                    [0, "white"],
                    [0.45, "yellow"],
                    [0.55, "pink"],
                    [1, "red"],
                ],
                "min": -1,
                "max": 1,
            },
        )
        fig

    .. ipython:: python
        :suppress:

        fig = data.contour(columns = ["x", "y"], func = f)
        fig.set_options(
            "colorAxis",
            {
                "stops": [
                    [0, "white"],
                    [0.45, "yellow"],
                    [0.55, "pink"],
                    [1, "red"],
                ],
                "min": -1,
                "max": 1,
            },
        )
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_contour_custom_color_1")
        with open("figures/plotting_highcharts_contour_custom_color_1.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_contour_custom_color_1.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom CMAP**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_contour_custom_color_1.png
        data.contour(columns = ["x", "y"], func = f, cmap = "Reds")

____

Size
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom Width and Height**

    .. code-block:: python
        
        data.contour(columns = ["x", "y"], func = f, width = 300, height = 300)

    .. ipython:: python
        :suppress:

        fig = data.contour(columns = ["x", "y"], func = f, width = 300, height = 300)
        fig.write_html("figures/plotting_plotly_contour_custom_size.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_contour_custom_size.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom Width and Height**

    .. code-block:: python
        
        data.contour(columns = ["x", "y"], func = f, width = 500, height = 200)

    .. ipython:: python
        :suppress:

        fig = data.contour(columns = ["x", "y"], func = f, width = 500, height = 200)
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_contour_custom_size")
        with open("figures/plotting_highcharts_contour_custom_size.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_contour_custom_size.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom Width and Height**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_contour_custom_size.png
        data.contour(columns = ["x", "y"], func = f, width = 6, height = 3)

_____


Text
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom Title**

    .. code-block:: python
        
        data.contour(columns = ["x", "y"], func = f).update_layout(title_text = "Custom Title")

    .. ipython:: python
        :suppress:

        fig = data.contour(columns = ["x", "y"], func = f).update_layout(title_text = "Custom Title")
        fig.write_html("figures/plotting_plotly_contour_custom_main_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_contour_custom_main_title.html

    **Custom Axis Titles**

    .. code-block:: python
        
        data.contour(columns = ["x", "y"], func = f, yaxis_title = "Custom Y-Axis Title")

    .. ipython:: python
        :suppress:

        fig = data.contour(columns = ["x", "y"], func = f, yaxis_title = "Custom Y-Axis Title", width = 650)
        fig.write_html("figures/plotting_plotly_contour_custom_y_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_contour_custom_y_title.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom Title Text**

    .. code-block:: python
        
        data.contour(columns = ["x", "y"], func = f, title = {"text": "Custom Title"})

    .. ipython:: python
        :suppress:

        fig = data.contour(columns = ["x", "y"], func = f, title = {"text": "Custom Title"})
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_contour_custom_text_title")
        with open("figures/plotting_highcharts_contour_custom_text_title.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_contour_custom_text_title.html

    **Custom Axis Titles**

    .. code-block:: python
        
        data.contour(columns = ["x", "y"], func = f, xAxis = {"title": {"text": "Custom X-Axis Title"}})

    .. ipython:: python
        :suppress:

        fig = data.contour(columns = ["x", "y"], func = f, xAxis = {"title": {"text": "Custom X-Axis Title"}})
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_contour_custom_text_xtitle")
        with open("figures/plotting_highcharts_contour_custom_text_xtitle.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_contour_custom_text_xtitle.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom Title Text**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_contour_custom_title_label.png
        data.contour(columns = ["x", "y"], func = f).set_title("Custom Title")

    **Custom Axis Titles**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_contour_custom_xaxis_label.png
        data.contour(columns = ["x", "y"], func = f).set_xlabel("Custom X Axis")

_____

