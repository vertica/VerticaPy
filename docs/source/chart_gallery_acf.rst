.. _chart_gallery.acf:

=====================
Auto-Correlation Plot
=====================

.. Necessary Code Elements

.. ipython:: python
    :suppress:

    import verticapy as vp
    from verticapy.datasets import load_amazon

    data = load_amazon()


General
-------

Let's begin by importing `VerticaPy`.

.. ipython:: python

    import verticapy as vp


Let's import the amazon dataset from `VerticaPy`.

.. code-block:: python
        
    from verticapy.datasets import load_amazon
    
    data = load_amazon()

In the context of data visualization, we have the flexibility to harness multiple plotting libraries to craft a wide range of graphical representations. VerticaPy, as a versatile tool, provides support for several graphic libraries, such as Matplotlib, Highcharts, and Plotly. Each of these libraries offers unique features and capabilities, allowing us to choose the most suitable one for our specific data visualization needs.

.. image:: ../../docs/source/_static/plotting_libs.png
   :width: 80%
   :align: center

.. note::
    
    To select the desired plotting library, we simply need to use the `set_option` function. VerticaPy offers the flexibility to smoothly transition between different plotting libraries. In instances where a particular graphic is not supported by the chosen library or is not supported within the VerticaPy framework, the tool will automatically generate a warning and then switch to an alternative library where the graphic can be created.

Please click on the tabs to view the various graphics generated by the different plotting libraries.

.. ipython:: python
    :suppress:

    import verticapy as vp

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    We can switch to using the `plotly` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "plotly")

    .. hint:: In VerticaPy, you have access to a variety of correlation techniques, including Pearson for linear relationships, Spearman for monotonic relationships, Cramer's V for categorical data, and more. It's important to note that each of these techniques involves SQL generation and may vary in computational cost. You can choose the most suitable technique based on your analysis requirements, considering the potential computational overhead.
    
    .. tab:: Bar

      .. code-block:: python
          
        data.acf(column = "number", ts = "date", by= "state",
                method = "pearson", p=48,
                )

      .. ipython:: python
          :suppress:
        
          fig = data.acf(column = "number", ts = "date", by= "state",
                method = "pearson", p=48, width = 650
                )
          fig.write_html("figures/plotting_plotly_acf_bar.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_acf_bar.html

    .. tab:: Heatmap

      .. code-block:: python
          
          data.acf(column = "number", ts = "date", by= "state", method = "pearson", kind = "heatmap")

      .. ipython:: python
          :suppress:

          fig = data.acf(column = "number", ts = "date", by= "state", method = "pearson", kind = "heatmap", width = 650)
          fig.write_html("figures/plotting_plotly_acf_matrix.html")

      .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_acf_matrix.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    We can switch to using the `highcharts` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "highcharts")

    .. hint:: In VerticaPy, you have access to a variety of correlation techniques, including Pearson for linear relationships, Spearman for monotonic relationships, Cramer's V for categorical data, and more. It's important to note that each of these techniques involves SQL generation and may vary in computational cost. You can choose the most suitable technique based on your analysis requirements, considering the potential computational overhead.

    .. tab:: Bar

      .. code-block:: python
          
        data.acf(column = "number", ts = "date", by= "state",
                method = "pearson", p=48,
                )

      .. ipython:: python
          :suppress:

          fig = data.acf(column = "number", ts = "date", by= "state",
                method = "pearson", p=48,
                )
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_acf_bar")
          with open("figures/plotting_highcharts_acf_bar.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_acf_bar.html

    .. tab:: Heatmap

      .. code-block:: python
          
          data.acf(column = "number", ts = "date", by= "state", method = "pearson", kind = "heatmap")

      .. ipython:: python
          :suppress:

          fig = data.acf(column = "number", ts = "date", by= "state", method = "pearson", kind = "heatmap")
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_acf_matrix")
          with open("figures/plotting_highcharts_acf_matrix.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_acf_matrix.html
        
.. tab:: Matplotlib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    We can switch to using the `matplotlib` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "matplotlib")

    .. hint:: In VerticaPy, you have access to a variety of correlation techniques, including Pearson for linear relationships, Spearman for monotonic relationships, Cramer's V for categorical data, and more. It's important to note that each of these techniques involves SQL generation and may vary in computational cost. You can choose the most suitable technique based on your analysis requirements, considering the potential computational overhead.

    .. tab:: Bar

      .. ipython:: python
          :okwarning:

          @savefig plotting_matplotlib_acf_bar.png
          data.acf(column = "number", ts = "date", by= "state",
                method = "pearson", p=48,
                )
        
    .. tab:: Heatmap

      .. ipython:: python
          :okwarning:

          @savefig plotting_matplotlib_acf_matrix.png
          data.acf(column = "number", ts = "date", by= "state", method = "pearson", kind = "heatmap")
        
___________________


Chart Customization
-------------------

VerticaPy empowers users with a high degree of flexibility when it comes to tailoring the visual aspects of their plots. 
This customization extends to essential elements such as **color schemes**, **text labels**, and **plot sizes**, as well as a wide range of other attributes that can be fine-tuned to align with specific design preferences and analytical requirements. Whether you want to make your visualizations more visually appealing or need to convey specific insights with precision, VerticaPy's customization options enable you to craft graphics that suit your exact needs.

.. Important:: Different customization parameters are available for Plotly, Highcharts, and Matplotlib. 
    For a comprehensive list of customization features, please consult the documentation of the respective 
    libraries: `plotly <https://plotly.com/python-api-reference/>`_, `matplotlib <https://matplotlib.org/stable/api/matplotlib_configuration_api.html>`_ and `highcharts <https://api.highcharts.com/highcharts/>`_.

Colors
~~~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom Colors**

    .. code-block:: python
        
        data.acf(column = "number", ts = "date", method = "pearson", colors = "red")

    .. ipython:: python
        :suppress:

        fig = data.acf(column = "number", ts = "date", method = "pearson", colors = "red")
        fig.write_html("figures/plotting_plotly_acf_custom_color_1.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_acf_custom_color_1.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom Colors**

    .. code-block:: python
        
        data.acf(column = "number", ts = "date", method = "pearson", colors = "red")

    .. ipython:: python
        :suppress:

        fig = data.acf(column = "number", ts = "date", method = "pearson", colors = "red")
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_acf_custom_color_1")
        with open("figures/plotting_highcharts_acf_custom_color_1.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_acf_custom_color_1.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom Colors**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_acf_custom_color_1.png
        data.acf(column = "number", ts = "date", method = "pearson", colors = "red")

____

Size
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom Width and Height**

    .. code-block:: python
        
        data.acf(column = "number", ts = "date", method = "pearson", width = 300, height = 300)

    .. ipython:: python
        :suppress:

        fig = data.acf(column = "number", ts = "date", method = "pearson", width = 300, height = 300)
        fig.write_html("figures/plotting_plotly_acf_custom_size.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_acf_custom_size.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom Width and Height**

    .. code-block:: python
        
        data.acf(column = "number", ts = "date", method = "pearson", width = 500, height = 200)

    .. ipython:: python
        :suppress:

        fig = data.acf(column = "number", ts = "date", method = "pearson", width = 500, height = 200)
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_acf_custom_size")
        with open("figures/plotting_highcharts_acf_custom_size.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_acf_custom_size.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom Width and Height**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_acf_bar_custom_size.png
        data.acf(column = "number", ts = "date", method = "pearson", width = 6, height = 3)

_____


Text
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom Title**

    .. code-block:: python
        
        data.acf(column = "number", ts = "date", method = "pearson").update_layout(title_text = "Custom Title")

    .. ipython:: python
        :suppress:

        fig = data.acf(column = "number", ts = "date", method = "pearson").update_layout(title_text = "Custom Title")
        fig.write_html("figures/plotting_plotly_acf_custom_main_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_acf_custom_main_title.html

    **Custom Axis Titles**

    .. code-block:: python
        
        data.acf(column = "number", ts = "date", method = "pearson", yaxis_title = "Custom Y-Axis Title")

    .. ipython:: python
        :suppress:

        fig = data.acf(column = "number", ts = "date", method = "pearson", yaxis_title = "Custom Y-Axis Title")
        fig.write_html("figures/plotting_plotly_acf_custom_y_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_acf_custom_y_title.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom Title Text**

    .. code-block:: python
        
        data.acf(column = "number", ts = "date", method = "pearson", title = {"text": "Custom Title"})

    .. ipython:: python
        :suppress:

        fig = data.acf(column = "number", ts = "date", method = "pearson", title = {"text": "Custom Title"})
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_acf_custom_text_title")
        with open("figures/plotting_highcharts_acf_custom_text_title.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_acf_custom_text_title.html

    **Custom Axis Titles**

    .. code-block:: python
        
        data.acf(column = "number", ts = "date", method = "pearson", xAxis = {"title": {"text": "Custom X-Axis Title"}})

    .. ipython:: python
        :suppress:

        fig = data.acf(column = "number", ts = "date", method = "pearson", xAxis = {"title": {"text": "Custom X-Axis Title"}})
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_acf_custom_text_xtitle")
        with open("figures/plotting_highcharts_acf_custom_text_xtitle.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_acf_custom_text_xtitle.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom Title Text**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_acf_custom_title_label.png
        data.acf(column = "number", ts = "date", method = "pearson").set_title("Custom Title")

    **Custom Axis Titles**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_acf_custom_yaxis_label.png
        data.acf(column = "number", ts = "date", method = "pearson").set_ylabel("Custom Y Axis")

_____

