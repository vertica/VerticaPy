.. _chart_gallery.classification_curve:

=======================================
Machine Learning - Classification Curve
=======================================

.. Necessary Code Elements

.. ipython:: python
    :suppress:

    import verticapy as vp
    import verticapy.machine_learning.vertica as vml
    import verticapy.machine_learning.metrics as vmt

    from verticapy.datasets import load_titanic

    data = load_titanic()

    model = vml.LogisticRegression()
    X = ["age", "fare"]
    y = "survived"
    model.fit(data, X, y)
    model.predict_proba(data, X, name = "survived_proba", inplace = True)


General
-------

In this classification example, our goal is to develop a predictive model that can determine the likelihood of passengers surviving the ill-fated Titanic voyage based on two critical factors: "age" and "fare".
The objective is to demonstrate how to plot ROC curves, Precision-Recall curves, or even gain curves by building a logistic regression model. 
Furthermore, we will illustrate how to create these curves using just two columns: one for probabilities and one for predictions.

Let's begin by importing `VerticaPy`.

.. ipython:: python

    import verticapy as vp

Let's import the titanic dataset from `verticapy.datasets`.

.. code-block:: python
        
    from verticapy.datasets import load_titanic

    data = load_titanic()


Let's create a logistic regression model using the entire dataset.

.. code-block:: python
    
    # Importing the Vertica ML module
    import verticapy.machine_learning.vertica as vml

    # Importing the Metrics module
    import verticapy.machine_learning.metrics as vmt

    # Defining the Model
    model = vml.LogisticRegression()

    # Defining Predictors and Response.
    X = ["age", "fare"]
    y = "survived"

    # Fitting the model
    model.fit(data, X, y)

    # Adding the probabilities to the vDataFrame
    model.predict_proba(data, X, name = "survived_proba", inplace = True)

    # Displaying the vDataFrame
    display(data)

In the context of data visualization, we have the flexibility to harness multiple plotting libraries to craft a wide range of graphical representations. VerticaPy, as a versatile tool, provides support for several graphic libraries, such as Matplotlib, Highcharts, and Plotly. Each of these libraries offers unique features and capabilities, allowing us to choose the most suitable one for our specific data visualization needs.

.. image:: ../../docs/source/_static/plotting_libs.png
   :width: 80%
   :align: center

.. note::
    
    To select the desired plotting library, we simply need to use the `set_option` function. VerticaPy offers the flexibility to smoothly transition between different plotting libraries. In instances where a particular graphic is not supported by the chosen library or is not supported within the VerticaPy framework, the tool will automatically generate a warning and then switch to an alternative library where the graphic can be created.

Please click on the tabs to view the various graphics generated by the different plotting libraries.

.. ipython:: python
    :suppress:

    import verticapy as vp

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    We can switch to using the `plotly` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "plotly")

    In VerticaPy, you have access to various classification curves that can be generated directly from the model. If you opt for this method, please ensure that you specify a test set for accuracy; otherwise, the curve will be based on the training set. Alternatively, you can create these curves using a probability column and a response column.
    
    .. tab:: ROC

      .. code-block:: python
          
          model.roc_curve()

      .. ipython:: python
          :suppress:
        
          fig = model.roc_curve()
          fig.write_html("figures/plotting_plotly_roc_1.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_roc_1.html

      **Creating visualizations using two columns**

      .. code-block:: python
          
          vmt.roc_curve(y_true = "survived", y_score = "survived_proba_1", input_relation = data)

      .. ipython:: python
          :suppress:
        
          fig = vmt.roc_curve(y_true = "survived", y_score = "survived_proba_1", input_relation = data)
          fig.write_html("figures/plotting_plotly_roc_2.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_roc_2.html

    .. tab:: PRC

      .. code-block:: python
          
          model.prc_curve()

      .. ipython:: python
          :suppress:
        
          fig = model.prc_curve()
          fig.write_html("figures/plotting_plotly_prc_1.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_prc_1.html

      **Creating visualizations using two columns**

      .. code-block:: python
          
          vmt.prc_curve(y_true = "survived", y_score = "survived_proba_1", input_relation = data)

      .. ipython:: python
          :suppress:
        
          fig = vmt.prc_curve(y_true = "survived", y_score = "survived_proba_1", input_relation = data)
          fig.write_html("figures/plotting_plotly_prc_2.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_prc_2.html

    .. tab:: Lift

      .. code-block:: python
          
          model.lift_chart()

      .. ipython:: python
          :suppress:
        
          fig = model.lift_chart()
          fig.write_html("figures/plotting_plotly_lift_1.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_lift_1.html

      **Creating visualizations using two columns**

      .. code-block:: python
          
          vmt.lift_chart(y_true = "survived", y_score = "survived_proba_1", input_relation = data)

      .. ipython:: python
          :suppress:
        
          fig = vmt.lift_chart(y_true = "survived", y_score = "survived_proba_1", input_relation = data)
          fig.write_html("figures/plotting_plotly_lift_2.html")

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_plotly_lift_2.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    We can switch to using the `highcharts` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "highcharts")

    In VerticaPy, you have access to various classification curves that can be generated directly from the model. If you opt for this method, please ensure that you specify a test set for accuracy; otherwise, the curve will be based on the training set. Alternatively, you can create these curves using a probability column and a response column.

    .. tab:: ROC

      .. code-block:: python
          
          model.roc_curve()

      .. ipython:: python
          :suppress:

          fig = model.roc_curve()
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_roc_1")
          with open("figures/plotting_highcharts_roc_1.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_roc_1.html

      **Creating visualizations using two columns**

      .. code-block:: python
          
          vmt.roc_curve(y_true = "survived", y_score = "survived_proba_1", input_relation = data)

      .. ipython:: python
          :suppress:

          fig = vmt.roc_curve(y_true = "survived", y_score = "survived_proba_1", input_relation = data)
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_roc_2")
          with open("figures/plotting_highcharts_roc_2.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_roc_2.html

    .. tab:: PRC

      .. code-block:: python
          
          model.prc_curve()

      .. ipython:: python
          :suppress:

          fig = model.prc_curve()
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_prc_1")
          with open("figures/plotting_highcharts_prc_1.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_prc_1.html

      **Creating visualizations using two columns**

      .. code-block:: python
          
          vmt.prc_curve(y_true = "survived", y_score = "survived_proba_1", input_relation = data)

      .. ipython:: python
          :suppress:

          fig = vmt.prc_curve(y_true = "survived", y_score = "survived_proba_1", input_relation = data)
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_prc_2")
          with open("figures/plotting_highcharts_prc_2.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_prc_2.html

    .. tab:: Lift

      .. code-block:: python
          
          model.lift_chart()

      ..  ipython:: python
          :suppress:

          fig = model.lift_chart()
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_lift_1")
          with open("figures/plotting_highcharts_lift_1.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_lift_1.html

      **Creating visualizations using two columns**

      .. code-block:: python
          
          vmt.lift_chart(y_true = "survived", y_score = "survived_proba_1", input_relation = data)

      .. ipython:: python
          :suppress:

          fig = vmt.lift_chart(y_true = "survived", y_score = "survived_proba_1", input_relation = data)
          html_text = fig.htmlcontent.replace("container", "plotting_highcharts_lift_2")
          with open("figures/plotting_highcharts_lift_2.html", "w") as file:
            file.write(html_text)

      .. raw:: html
          :file: SPHINX_DIRECTORY/figures/plotting_highcharts_lift_2.html
        
.. tab:: Matplotlib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    We can switch to using the `matplotlib` module.

    .. code-block:: python
        
        vp.set_option("plotting_lib", "matplotlib")

    In VerticaPy, you have access to various classification curves that can be generated directly from the model. If you opt for this method, please ensure that you specify a test set for accuracy; otherwise, the curve will be based on the training set. Alternatively, you can create these curves using a probability column and a response column.

    .. tab:: ROC

      .. ipython:: python
          :okwarning:

          @savefig plotting_matplotlib_roc_1.png
          model.roc_curve()

      **Creating visualizations using two columns**

      .. ipython:: python
          :okwarning:

          @savefig plotting_matplotlib_roc_2.png
          vmt.roc_curve(y_true = "survived", y_score = "survived_proba_1", input_relation = data)

    .. tab:: PRC

      .. ipython:: python
          :okwarning:

          @savefig plotting_matplotlib_prc_1.png
          model.prc_curve()

      **Creating visualizations using two columns**

      .. ipython:: python

          @savefig plotting_matplotlib_prc_2.png
          vmt.prc_curve(y_true = "survived", y_score = "survived_proba_1", input_relation = data)

    .. tab:: Lift

      .. ipython:: python
          :okwarning:

          @savefig plotting_matplotlib_lift_1.png
          model.lift_chart()

      **Creating visualizations using two columns**

      .. ipython:: python
          :okwarning:

          @savefig plotting_matplotlib_lift_2.png
          vmt.lift_chart(y_true = "survived", y_score = "survived_proba_1", input_relation = data)


______________

Number of Bins
--------------

.. hint:: When working with classification charts, you have the flexibility to generate a chart with varying levels of precision by adjusting the number of bins. However, it's essential to exercise caution because a high number of bins, while potentially providing more detailed results, can significantly impact performance and computational efficiency.

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **nbins = 10**

    .. code-block:: python
        
        model.roc_curve(nbins = 10)

    .. ipython:: python
        :suppress:

        fig = model.roc_curve(nbins = 10)
        fig.write_html("figures/plotting_plotly_roc_nbins_10.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_roc_nbins_10.html

    **nbins = 1000**

    .. code-block:: python
        
        model.roc_curve(nbins = 1000)

    .. ipython:: python
        :suppress:

        fig = model.roc_curve(nbins = 1000)
        fig.write_html("figures/plotting_plotly_roc_nbins_1000.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_roc_nbins_1000.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **nbins = 10**

    .. code-block:: python
              
        model.roc_curve(nbins = 10)

    .. ipython:: python
        :suppress:

        fig = model.roc_curve(nbins = 10)
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_roc_nbins_10")
        with open("figures/plotting_highcharts_roc_nbins_10.html", "w") as file:
          file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_roc_nbins_10.html

    **nbins = 1000**

    .. code-block:: python
              
        model.roc_curve(nbins = 1000)

    .. ipython:: python
        :suppress:

        fig = model.roc_curve(nbins = 1000)
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_roc_nbins_1000")
        with open("figures/plotting_highcharts_roc_nbins_1000.html", "w") as file:
          file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_roc_nbins_1000.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **nbins = 10**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_roc_nbins_10.png
        model.roc_curve(nbins = 10)

    **nbins = 1000**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_roc_nbins_1000.png
        model.roc_curve(nbins = 1000)

___________________


Chart Customization
-------------------

VerticaPy empowers users with a high degree of flexibility when it comes to tailoring the visual aspects of their plots. 
This customization extends to essential elements such as **color schemes**, **text labels**, and **plot sizes**, as well as a wide range of other attributes that can be fine-tuned to align with specific design preferences and analytical requirements. Whether you want to make your visualizations more visually appealing or need to convey specific insights with precision, VerticaPy's customization options enable you to craft graphics that suit your exact needs.

.. Important:: Different customization parameters are available for Plotly, Highcharts, and Matplotlib. 
    For a comprehensive list of customization features, please consult the documentation of the respective 
    libraries: `plotly <https://plotly.com/python-api-reference/>`_, `matplotlib <https://matplotlib.org/stable/api/matplotlib_configuration_api.html>`_ and `highcharts <https://api.highcharts.com/highcharts/>`_.

Colors
~~~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom colors**

    .. code-block:: python
        
        fig = model.roc_curve()
        fig.update_traces(marker = dict(color="red"))

    .. ipython:: python
        :suppress:

        fig = model.roc_curve()
        fig.update_traces(marker = dict(color="red"))
        fig.write_html("figures/plotting_plotly_roc_curve_custom_color_1.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_roc_curve_custom_color_1.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom colors**

    .. code-block:: python
        
        model.roc_curve(colors = "red")

    .. ipython:: python
        :suppress:

        fig = model.roc_curve(colors = "red")
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_roc_curve_custom_color_1")
        with open("figures/plotting_highcharts_roc_curve_custom_color_1.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_roc_curve_custom_color_1.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom colors**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_roc_curve_custom_color_1.png
        model.roc_curve(colors = "red")

____

Size
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom Width and Height**

    .. code-block:: python
        
        model.roc_curve(width = 300, height = 300)

    .. ipython:: python
        :suppress:

        fig = model.roc_curve(width = 300, height = 300)
        fig.write_html("figures/plotting_plotly_roc_curve_custom_size.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_roc_curve_custom_size.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom Width and Height**

    .. code-block:: python
        
        model.roc_curve(width = 500, height = 200)

    .. ipython:: python
        :suppress:

        fig = model.roc_curve(width = 500, height = 200)
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_roc_curve_custom_size")
        with open("figures/plotting_highcharts_roc_curve_custom_size.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_roc_curve_custom_size.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom Width and Height**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_roc_curve_single_custom_size.png
        model.roc_curve(width = 6, height = 3)

_____


Text
~~~~

.. tab:: Plotly

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "plotly")

    **Custom Title**

    .. code-block:: python
        
        model.roc_curve().update_layout(title_text = "Custom Title")

    .. ipython:: python
        :suppress:

        fig = model.roc_curve().update_layout(title_text = "Custom Title")
        fig.write_html("figures/plotting_plotly_roc_curve_custom_main_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_roc_curve_custom_main_title.html


    **Custom Axis Titles**

    .. code-block:: python
        
        model.roc_curve(yaxis_title = "Custom Y-Axis Title")

    .. ipython:: python
        :suppress:

        fig = model.roc_curve(yaxis_title = "Custom Y-Axis Title")
        fig.write_html("figures/plotting_plotly_roc_curve_custom_y_title.html")

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_plotly_roc_curve_custom_y_title.html

.. tab:: Highcharts

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "highcharts")

    **Custom Title Text**

    .. code-block:: python
        
        model.roc_curve(title = {"text": "Custom Title"})

    .. ipython:: python
        :suppress:

        fig = model.roc_curve(title = {"text": "Custom Title"})
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_roc_curve_custom_text_title")
        with open("figures/plotting_highcharts_roc_curve_custom_text_title.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_roc_curve_custom_text_title.html

    **Custom Axis Titles**

    .. code-block:: python
        
        model.roc_curve(xAxis = {"title": {"text": "Custom X-Axis Title"}})

    .. ipython:: python
        :suppress:

        fig = model.roc_curve(xAxis = {"title": {"text": "Custom X-Axis Title"}})
        html_text = fig.htmlcontent.replace("container", "plotting_highcharts_roc_curve_custom_text_xtitle")
        with open("figures/plotting_highcharts_roc_curve_custom_text_xtitle.html", "w") as file:
            file.write(html_text)

    .. raw:: html
        :file: SPHINX_DIRECTORY/figures/plotting_highcharts_roc_curve_custom_text_xtitle.html

.. tab:: Matplolib

    .. ipython:: python
        :suppress:

        vp.set_option("plotting_lib", "matplotlib")

    **Custom Title Text**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_roc_curve_custom_title_label.png
        model.roc_curve().set_title("Custom Title")

    **Custom Axis Titles**

    .. ipython:: python
        :okwarning:

        @savefig plotting_matplotlib_roc_curve_custom_yaxis_label.png
        model.roc_curve().set_ylabel("Custom Y Axis")

_____

